/**
 * This file was automatically generated by nexus-prisma@0.3.7
 * Do not make changes to this file directly
 */

import { core } from 'nexus'
import { GraphQLResolveInfo } from 'graphql'
import * as prisma from '../prisma-client'

declare global {
  interface NexusPrismaGen extends NexusPrismaTypes {}
}

export interface NexusPrismaTypes {
  objectTypes: {
    fields: {
      Query: QueryObject
      Post: PostObject
      User: UserObject
      Habit: HabitObject
      DayHabit: DayHabitObject
      Mood: MoodObject
      PostConnection: PostConnectionObject
      PageInfo: PageInfoObject
      PostEdge: PostEdgeObject
      AggregatePost: AggregatePostObject
      UserConnection: UserConnectionObject
      UserEdge: UserEdgeObject
      AggregateUser: AggregateUserObject
      HabitConnection: HabitConnectionObject
      HabitEdge: HabitEdgeObject
      AggregateHabit: AggregateHabitObject
      DayHabitConnection: DayHabitConnectionObject
      DayHabitEdge: DayHabitEdgeObject
      AggregateDayHabit: AggregateDayHabitObject
      MoodConnection: MoodConnectionObject
      MoodEdge: MoodEdgeObject
      AggregateMood: AggregateMoodObject
      Mutation: MutationObject
      BatchPayload: BatchPayloadObject
      Subscription: SubscriptionObject
      PostSubscriptionPayload: PostSubscriptionPayloadObject
      PostPreviousValues: PostPreviousValuesObject
      UserSubscriptionPayload: UserSubscriptionPayloadObject
      UserPreviousValues: UserPreviousValuesObject
      HabitSubscriptionPayload: HabitSubscriptionPayloadObject
      HabitPreviousValues: HabitPreviousValuesObject
      DayHabitSubscriptionPayload: DayHabitSubscriptionPayloadObject
      DayHabitPreviousValues: DayHabitPreviousValuesObject
      MoodSubscriptionPayload: MoodSubscriptionPayloadObject
      MoodPreviousValues: MoodPreviousValuesObject
    }
    fieldsDetails: {
      Query: QueryFieldDetails
      Post: PostFieldDetails
      User: UserFieldDetails
      Habit: HabitFieldDetails
      DayHabit: DayHabitFieldDetails
      Mood: MoodFieldDetails
      PostConnection: PostConnectionFieldDetails
      PageInfo: PageInfoFieldDetails
      PostEdge: PostEdgeFieldDetails
      AggregatePost: AggregatePostFieldDetails
      UserConnection: UserConnectionFieldDetails
      UserEdge: UserEdgeFieldDetails
      AggregateUser: AggregateUserFieldDetails
      HabitConnection: HabitConnectionFieldDetails
      HabitEdge: HabitEdgeFieldDetails
      AggregateHabit: AggregateHabitFieldDetails
      DayHabitConnection: DayHabitConnectionFieldDetails
      DayHabitEdge: DayHabitEdgeFieldDetails
      AggregateDayHabit: AggregateDayHabitFieldDetails
      MoodConnection: MoodConnectionFieldDetails
      MoodEdge: MoodEdgeFieldDetails
      AggregateMood: AggregateMoodFieldDetails
      Mutation: MutationFieldDetails
      BatchPayload: BatchPayloadFieldDetails
      Subscription: SubscriptionFieldDetails
      PostSubscriptionPayload: PostSubscriptionPayloadFieldDetails
      PostPreviousValues: PostPreviousValuesFieldDetails
      UserSubscriptionPayload: UserSubscriptionPayloadFieldDetails
      UserPreviousValues: UserPreviousValuesFieldDetails
      HabitSubscriptionPayload: HabitSubscriptionPayloadFieldDetails
      HabitPreviousValues: HabitPreviousValuesFieldDetails
      DayHabitSubscriptionPayload: DayHabitSubscriptionPayloadFieldDetails
      DayHabitPreviousValues: DayHabitPreviousValuesFieldDetails
      MoodSubscriptionPayload: MoodSubscriptionPayloadFieldDetails
      MoodPreviousValues: MoodPreviousValuesFieldDetails
    }
  }
  inputTypes: {
    fields: {
      PostWhereUniqueInput: PostWhereUniqueInputInputObject
      PostWhereInput: PostWhereInputInputObject
      UserWhereInput: UserWhereInputInputObject
      HabitWhereInput: HabitWhereInputInputObject
      DayHabitWhereInput: DayHabitWhereInputInputObject
      MoodWhereInput: MoodWhereInputInputObject
      UserWhereUniqueInput: UserWhereUniqueInputInputObject
      HabitWhereUniqueInput: HabitWhereUniqueInputInputObject
      DayHabitWhereUniqueInput: DayHabitWhereUniqueInputInputObject
      MoodWhereUniqueInput: MoodWhereUniqueInputInputObject
      PostCreateInput: PostCreateInputInputObject
      UserCreateOneWithoutPostsInput: UserCreateOneWithoutPostsInputInputObject
      UserCreateWithoutPostsInput: UserCreateWithoutPostsInputInputObject
      HabitCreateManyWithoutOwnerInput: HabitCreateManyWithoutOwnerInputInputObject
      HabitCreateWithoutOwnerInput: HabitCreateWithoutOwnerInputInputObject
      DayHabitCreateManyWithoutHabitInput: DayHabitCreateManyWithoutHabitInputInputObject
      DayHabitCreateWithoutHabitInput: DayHabitCreateWithoutHabitInputInputObject
      MoodCreateManyWithoutOwnerInput: MoodCreateManyWithoutOwnerInputInputObject
      MoodCreateWithoutOwnerInput: MoodCreateWithoutOwnerInputInputObject
      PostUpdateInput: PostUpdateInputInputObject
      UserUpdateOneRequiredWithoutPostsInput: UserUpdateOneRequiredWithoutPostsInputInputObject
      UserUpdateWithoutPostsDataInput: UserUpdateWithoutPostsDataInputInputObject
      HabitUpdateManyWithoutOwnerInput: HabitUpdateManyWithoutOwnerInputInputObject
      HabitUpdateWithWhereUniqueWithoutOwnerInput: HabitUpdateWithWhereUniqueWithoutOwnerInputInputObject
      HabitUpdateWithoutOwnerDataInput: HabitUpdateWithoutOwnerDataInputInputObject
      DayHabitUpdateManyWithoutHabitInput: DayHabitUpdateManyWithoutHabitInputInputObject
      DayHabitUpdateWithWhereUniqueWithoutHabitInput: DayHabitUpdateWithWhereUniqueWithoutHabitInputInputObject
      DayHabitUpdateWithoutHabitDataInput: DayHabitUpdateWithoutHabitDataInputInputObject
      DayHabitUpsertWithWhereUniqueWithoutHabitInput: DayHabitUpsertWithWhereUniqueWithoutHabitInputInputObject
      DayHabitScalarWhereInput: DayHabitScalarWhereInputInputObject
      DayHabitUpdateManyWithWhereNestedInput: DayHabitUpdateManyWithWhereNestedInputInputObject
      DayHabitUpdateManyDataInput: DayHabitUpdateManyDataInputInputObject
      HabitUpsertWithWhereUniqueWithoutOwnerInput: HabitUpsertWithWhereUniqueWithoutOwnerInputInputObject
      HabitScalarWhereInput: HabitScalarWhereInputInputObject
      HabitUpdateManyWithWhereNestedInput: HabitUpdateManyWithWhereNestedInputInputObject
      HabitUpdateManyDataInput: HabitUpdateManyDataInputInputObject
      MoodUpdateManyWithoutOwnerInput: MoodUpdateManyWithoutOwnerInputInputObject
      MoodUpdateWithWhereUniqueWithoutOwnerInput: MoodUpdateWithWhereUniqueWithoutOwnerInputInputObject
      MoodUpdateWithoutOwnerDataInput: MoodUpdateWithoutOwnerDataInputInputObject
      MoodUpsertWithWhereUniqueWithoutOwnerInput: MoodUpsertWithWhereUniqueWithoutOwnerInputInputObject
      MoodScalarWhereInput: MoodScalarWhereInputInputObject
      MoodUpdateManyWithWhereNestedInput: MoodUpdateManyWithWhereNestedInputInputObject
      MoodUpdateManyDataInput: MoodUpdateManyDataInputInputObject
      UserUpsertWithoutPostsInput: UserUpsertWithoutPostsInputInputObject
      PostUpdateManyMutationInput: PostUpdateManyMutationInputInputObject
      UserCreateInput: UserCreateInputInputObject
      PostCreateManyWithoutAuthorInput: PostCreateManyWithoutAuthorInputInputObject
      PostCreateWithoutAuthorInput: PostCreateWithoutAuthorInputInputObject
      UserUpdateInput: UserUpdateInputInputObject
      PostUpdateManyWithoutAuthorInput: PostUpdateManyWithoutAuthorInputInputObject
      PostUpdateWithWhereUniqueWithoutAuthorInput: PostUpdateWithWhereUniqueWithoutAuthorInputInputObject
      PostUpdateWithoutAuthorDataInput: PostUpdateWithoutAuthorDataInputInputObject
      PostUpsertWithWhereUniqueWithoutAuthorInput: PostUpsertWithWhereUniqueWithoutAuthorInputInputObject
      PostScalarWhereInput: PostScalarWhereInputInputObject
      PostUpdateManyWithWhereNestedInput: PostUpdateManyWithWhereNestedInputInputObject
      PostUpdateManyDataInput: PostUpdateManyDataInputInputObject
      UserUpdateManyMutationInput: UserUpdateManyMutationInputInputObject
      HabitCreateInput: HabitCreateInputInputObject
      UserCreateOneWithoutHabitsInput: UserCreateOneWithoutHabitsInputInputObject
      UserCreateWithoutHabitsInput: UserCreateWithoutHabitsInputInputObject
      HabitUpdateInput: HabitUpdateInputInputObject
      UserUpdateOneRequiredWithoutHabitsInput: UserUpdateOneRequiredWithoutHabitsInputInputObject
      UserUpdateWithoutHabitsDataInput: UserUpdateWithoutHabitsDataInputInputObject
      UserUpsertWithoutHabitsInput: UserUpsertWithoutHabitsInputInputObject
      HabitUpdateManyMutationInput: HabitUpdateManyMutationInputInputObject
      DayHabitCreateInput: DayHabitCreateInputInputObject
      HabitCreateOneWithoutHabitsInput: HabitCreateOneWithoutHabitsInputInputObject
      HabitCreateWithoutHabitsInput: HabitCreateWithoutHabitsInputInputObject
      DayHabitUpdateInput: DayHabitUpdateInputInputObject
      HabitUpdateOneRequiredWithoutHabitsInput: HabitUpdateOneRequiredWithoutHabitsInputInputObject
      HabitUpdateWithoutHabitsDataInput: HabitUpdateWithoutHabitsDataInputInputObject
      HabitUpsertWithoutHabitsInput: HabitUpsertWithoutHabitsInputInputObject
      DayHabitUpdateManyMutationInput: DayHabitUpdateManyMutationInputInputObject
      MoodCreateInput: MoodCreateInputInputObject
      UserCreateOneWithoutMoodsInput: UserCreateOneWithoutMoodsInputInputObject
      UserCreateWithoutMoodsInput: UserCreateWithoutMoodsInputInputObject
      MoodUpdateInput: MoodUpdateInputInputObject
      UserUpdateOneRequiredWithoutMoodsInput: UserUpdateOneRequiredWithoutMoodsInputInputObject
      UserUpdateWithoutMoodsDataInput: UserUpdateWithoutMoodsDataInputInputObject
      UserUpsertWithoutMoodsInput: UserUpsertWithoutMoodsInputInputObject
      MoodUpdateManyMutationInput: MoodUpdateManyMutationInputInputObject
      PostSubscriptionWhereInput: PostSubscriptionWhereInputInputObject
      UserSubscriptionWhereInput: UserSubscriptionWhereInputInputObject
      HabitSubscriptionWhereInput: HabitSubscriptionWhereInputInputObject
      DayHabitSubscriptionWhereInput: DayHabitSubscriptionWhereInputInputObject
      MoodSubscriptionWhereInput: MoodSubscriptionWhereInputInputObject
    }
  }
  enumTypes: {
    MoodTypes: MoodTypesValues,
    PostOrderByInput: PostOrderByInputValues,
    HabitOrderByInput: HabitOrderByInputValues,
    DayHabitOrderByInput: DayHabitOrderByInputValues,
    MoodOrderByInput: MoodOrderByInputValues,
    UserOrderByInput: UserOrderByInputValues,
    MutationType: MutationTypeValues,
  }
}

// Types for Query

type QueryObject =
  | QueryFields
  | { name: 'post', args?: QueryPostArgs[] | false, alias?: string  } 
  | { name: 'posts', args?: QueryPostsArgs[] | false, alias?: string  } 
  | { name: 'postsConnection', args?: QueryPostsConnectionArgs[] | false, alias?: string  } 
  | { name: 'user', args?: QueryUserArgs[] | false, alias?: string  } 
  | { name: 'users', args?: QueryUsersArgs[] | false, alias?: string  } 
  | { name: 'usersConnection', args?: QueryUsersConnectionArgs[] | false, alias?: string  } 
  | { name: 'habit', args?: QueryHabitArgs[] | false, alias?: string  } 
  | { name: 'habits', args?: QueryHabitsArgs[] | false, alias?: string  } 
  | { name: 'habitsConnection', args?: QueryHabitsConnectionArgs[] | false, alias?: string  } 
  | { name: 'dayHabit', args?: QueryDayHabitArgs[] | false, alias?: string  } 
  | { name: 'dayHabits', args?: QueryDayHabitsArgs[] | false, alias?: string  } 
  | { name: 'dayHabitsConnection', args?: QueryDayHabitsConnectionArgs[] | false, alias?: string  } 
  | { name: 'mood', args?: QueryMoodArgs[] | false, alias?: string  } 
  | { name: 'moods', args?: QueryMoodsArgs[] | false, alias?: string  } 
  | { name: 'moodsConnection', args?: QueryMoodsConnectionArgs[] | false, alias?: string  } 

type QueryFields =
  | 'post'
  | 'posts'
  | 'postsConnection'
  | 'user'
  | 'users'
  | 'usersConnection'
  | 'habit'
  | 'habits'
  | 'habitsConnection'
  | 'dayHabit'
  | 'dayHabits'
  | 'dayHabitsConnection'
  | 'mood'
  | 'moods'
  | 'moodsConnection'


type QueryPostArgs =
  | 'where'
type QueryPostsArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryPostsConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryUserArgs =
  | 'where'
type QueryUsersArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryUsersConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryHabitArgs =
  | 'where'
type QueryHabitsArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryHabitsConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryDayHabitArgs =
  | 'where'
type QueryDayHabitsArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryDayHabitsConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryMoodArgs =
  | 'where'
type QueryMoodsArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryMoodsConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
  

export interface QueryFieldDetails {
  post: {
    type: 'Post'
    args: Record<QueryPostArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: PostWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Post | null> | prisma.Post | null
  }
  posts: {
    type: 'Post'
    args: Record<QueryPostsArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: PostWhereInput | null, orderBy?: prisma.PostOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Post[]> | prisma.Post[]
  }
  postsConnection: {
    type: 'PostConnection'
    args: Record<QueryPostsConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: PostWhereInput | null, orderBy?: prisma.PostOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PostConnection> | prisma.PostConnection
  }
  user: {
    type: 'User'
    args: Record<QueryUserArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: UserWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User | null> | prisma.User | null
  }
  users: {
    type: 'User'
    args: Record<QueryUsersArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: UserWhereInput | null, orderBy?: prisma.UserOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User[]> | prisma.User[]
  }
  usersConnection: {
    type: 'UserConnection'
    args: Record<QueryUsersConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: UserWhereInput | null, orderBy?: prisma.UserOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.UserConnection> | prisma.UserConnection
  }
  habit: {
    type: 'Habit'
    args: Record<QueryHabitArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: HabitWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Habit | null> | prisma.Habit | null
  }
  habits: {
    type: 'Habit'
    args: Record<QueryHabitsArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: HabitWhereInput | null, orderBy?: prisma.HabitOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Habit[]> | prisma.Habit[]
  }
  habitsConnection: {
    type: 'HabitConnection'
    args: Record<QueryHabitsConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: HabitWhereInput | null, orderBy?: prisma.HabitOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.HabitConnection> | prisma.HabitConnection
  }
  dayHabit: {
    type: 'DayHabit'
    args: Record<QueryDayHabitArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: DayHabitWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.DayHabit | null> | prisma.DayHabit | null
  }
  dayHabits: {
    type: 'DayHabit'
    args: Record<QueryDayHabitsArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: DayHabitWhereInput | null, orderBy?: prisma.DayHabitOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.DayHabit[]> | prisma.DayHabit[]
  }
  dayHabitsConnection: {
    type: 'DayHabitConnection'
    args: Record<QueryDayHabitsConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: DayHabitWhereInput | null, orderBy?: prisma.DayHabitOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.DayHabitConnection> | prisma.DayHabitConnection
  }
  mood: {
    type: 'Mood'
    args: Record<QueryMoodArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: MoodWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Mood | null> | prisma.Mood | null
  }
  moods: {
    type: 'Mood'
    args: Record<QueryMoodsArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: MoodWhereInput | null, orderBy?: prisma.MoodOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Mood[]> | prisma.Mood[]
  }
  moodsConnection: {
    type: 'MoodConnection'
    args: Record<QueryMoodsConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: MoodWhereInput | null, orderBy?: prisma.MoodOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MoodConnection> | prisma.MoodConnection
  }
}
  

// Types for Post

type PostObject =
  | PostFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 
  | { name: 'published', args?: [] | false, alias?: string  } 
  | { name: 'title', args?: [] | false, alias?: string  } 
  | { name: 'content', args?: [] | false, alias?: string  } 
  | { name: 'author', args?: [] | false, alias?: string  } 

type PostFields =
  | 'id'
  | 'createdAt'
  | 'updatedAt'
  | 'published'
  | 'title'
  | 'content'
  | 'author'



  

export interface PostFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  published: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  title: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  content: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  author: {
    type: 'User'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Post">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User> | prisma.User
  }
}
  

// Types for User

type UserObject =
  | UserFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'email', args?: [] | false, alias?: string  } 
  | { name: 'password', args?: [] | false, alias?: string  } 
  | { name: 'name', args?: [] | false, alias?: string  } 
  | { name: 'posts', args?: UserPostsArgs[] | false, alias?: string  } 
  | { name: 'pushToken', args?: [] | false, alias?: string  } 
  | { name: 'habits', args?: UserHabitsArgs[] | false, alias?: string  } 
  | { name: 'moods', args?: UserMoodsArgs[] | false, alias?: string  } 
  | { name: 'isPro', args?: [] | false, alias?: string  } 

type UserFields =
  | 'id'
  | 'email'
  | 'password'
  | 'name'
  | 'posts'
  | 'pushToken'
  | 'habits'
  | 'moods'
  | 'isPro'


type UserPostsArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type UserHabitsArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type UserMoodsArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
  

export interface UserFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  email: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  password: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  posts: {
    type: 'Post'
    args: Record<UserPostsArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"User">,
      args: { where?: PostWhereInput | null, orderBy?: prisma.PostOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Post[]> | prisma.Post[]
  }
  pushToken: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  habits: {
    type: 'Habit'
    args: Record<UserHabitsArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"User">,
      args: { where?: HabitWhereInput | null, orderBy?: prisma.HabitOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Habit[]> | prisma.Habit[]
  }
  moods: {
    type: 'Mood'
    args: Record<UserMoodsArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"User">,
      args: { where?: MoodWhereInput | null, orderBy?: prisma.MoodOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Mood[]> | prisma.Mood[]
  }
  isPro: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for Habit

type HabitObject =
  | HabitFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'title', args?: [] | false, alias?: string  } 
  | { name: 'description', args?: [] | false, alias?: string  } 
  | { name: 'starred', args?: [] | false, alias?: string  } 
  | { name: 'owner', args?: [] | false, alias?: string  } 
  | { name: 'habits', args?: HabitHabitsArgs[] | false, alias?: string  } 

type HabitFields =
  | 'id'
  | 'title'
  | 'description'
  | 'starred'
  | 'owner'
  | 'habits'


type HabitHabitsArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
  

export interface HabitFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  title: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  description: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  starred: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  owner: {
    type: 'User'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Habit">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User> | prisma.User
  }
  habits: {
    type: 'DayHabit'
    args: Record<HabitHabitsArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Habit">,
      args: { where?: DayHabitWhereInput | null, orderBy?: prisma.DayHabitOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.DayHabit[]> | prisma.DayHabit[]
  }
}
  

// Types for DayHabit

type DayHabitObject =
  | DayHabitFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'done', args?: [] | false, alias?: string  } 
  | { name: 'date', args?: [] | false, alias?: string  } 
  | { name: 'habit', args?: [] | false, alias?: string  } 

type DayHabitFields =
  | 'id'
  | 'done'
  | 'date'
  | 'habit'



  

export interface DayHabitFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  done: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  date: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  habit: {
    type: 'Habit'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"DayHabit">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Habit> | prisma.Habit
  }
}
  

// Types for Mood

type MoodObject =
  | MoodFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'type', args?: [] | false, alias?: string  } 
  | { name: 'date', args?: [] | false, alias?: string  } 
  | { name: 'owner', args?: [] | false, alias?: string  } 

type MoodFields =
  | 'id'
  | 'type'
  | 'date'
  | 'owner'



  

export interface MoodFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  type: {
    type: 'MoodTypes'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mood">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MoodTypes> | prisma.MoodTypes
  }
  date: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  owner: {
    type: 'User'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mood">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User> | prisma.User
  }
}
  

// Types for PostConnection

type PostConnectionObject =
  | PostConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type PostConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface PostConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"PostConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'PostEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"PostConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PostEdge[]> | prisma.PostEdge[]
  }
  aggregate: {
    type: 'AggregatePost'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"PostConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregatePost> | prisma.AggregatePost
  }
}
  

// Types for PageInfo

type PageInfoObject =
  | PageInfoFields
  | { name: 'hasNextPage', args?: [] | false, alias?: string  } 
  | { name: 'hasPreviousPage', args?: [] | false, alias?: string  } 
  | { name: 'startCursor', args?: [] | false, alias?: string  } 
  | { name: 'endCursor', args?: [] | false, alias?: string  } 

type PageInfoFields =
  | 'hasNextPage'
  | 'hasPreviousPage'
  | 'startCursor'
  | 'endCursor'



  

export interface PageInfoFieldDetails {
  hasNextPage: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  hasPreviousPage: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  startCursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  endCursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
}
  

// Types for PostEdge

type PostEdgeObject =
  | PostEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type PostEdgeFields =
  | 'node'
  | 'cursor'



  

export interface PostEdgeFieldDetails {
  node: {
    type: 'Post'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"PostEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Post> | prisma.Post
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregatePost

type AggregatePostObject =
  | AggregatePostFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregatePostFields =
  | 'count'



  

export interface AggregatePostFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for UserConnection

type UserConnectionObject =
  | UserConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type UserConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface UserConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"UserConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'UserEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"UserConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.UserEdge[]> | prisma.UserEdge[]
  }
  aggregate: {
    type: 'AggregateUser'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"UserConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateUser> | prisma.AggregateUser
  }
}
  

// Types for UserEdge

type UserEdgeObject =
  | UserEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type UserEdgeFields =
  | 'node'
  | 'cursor'



  

export interface UserEdgeFieldDetails {
  node: {
    type: 'User'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"UserEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User> | prisma.User
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateUser

type AggregateUserObject =
  | AggregateUserFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateUserFields =
  | 'count'



  

export interface AggregateUserFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for HabitConnection

type HabitConnectionObject =
  | HabitConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type HabitConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface HabitConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"HabitConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'HabitEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"HabitConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.HabitEdge[]> | prisma.HabitEdge[]
  }
  aggregate: {
    type: 'AggregateHabit'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"HabitConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateHabit> | prisma.AggregateHabit
  }
}
  

// Types for HabitEdge

type HabitEdgeObject =
  | HabitEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type HabitEdgeFields =
  | 'node'
  | 'cursor'



  

export interface HabitEdgeFieldDetails {
  node: {
    type: 'Habit'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"HabitEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Habit> | prisma.Habit
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateHabit

type AggregateHabitObject =
  | AggregateHabitFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateHabitFields =
  | 'count'



  

export interface AggregateHabitFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for DayHabitConnection

type DayHabitConnectionObject =
  | DayHabitConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type DayHabitConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface DayHabitConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"DayHabitConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'DayHabitEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"DayHabitConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.DayHabitEdge[]> | prisma.DayHabitEdge[]
  }
  aggregate: {
    type: 'AggregateDayHabit'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"DayHabitConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateDayHabit> | prisma.AggregateDayHabit
  }
}
  

// Types for DayHabitEdge

type DayHabitEdgeObject =
  | DayHabitEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type DayHabitEdgeFields =
  | 'node'
  | 'cursor'



  

export interface DayHabitEdgeFieldDetails {
  node: {
    type: 'DayHabit'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"DayHabitEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.DayHabit> | prisma.DayHabit
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateDayHabit

type AggregateDayHabitObject =
  | AggregateDayHabitFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateDayHabitFields =
  | 'count'



  

export interface AggregateDayHabitFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for MoodConnection

type MoodConnectionObject =
  | MoodConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type MoodConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface MoodConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"MoodConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'MoodEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"MoodConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MoodEdge[]> | prisma.MoodEdge[]
  }
  aggregate: {
    type: 'AggregateMood'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"MoodConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateMood> | prisma.AggregateMood
  }
}
  

// Types for MoodEdge

type MoodEdgeObject =
  | MoodEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type MoodEdgeFields =
  | 'node'
  | 'cursor'



  

export interface MoodEdgeFieldDetails {
  node: {
    type: 'Mood'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"MoodEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Mood> | prisma.Mood
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateMood

type AggregateMoodObject =
  | AggregateMoodFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateMoodFields =
  | 'count'



  

export interface AggregateMoodFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for Mutation

type MutationObject =
  | MutationFields
  | { name: 'createPost', args?: MutationCreatePostArgs[] | false, alias?: string  } 
  | { name: 'updatePost', args?: MutationUpdatePostArgs[] | false, alias?: string  } 
  | { name: 'updateManyPosts', args?: MutationUpdateManyPostsArgs[] | false, alias?: string  } 
  | { name: 'upsertPost', args?: MutationUpsertPostArgs[] | false, alias?: string  } 
  | { name: 'deletePost', args?: MutationDeletePostArgs[] | false, alias?: string  } 
  | { name: 'deleteManyPosts', args?: MutationDeleteManyPostsArgs[] | false, alias?: string  } 
  | { name: 'createUser', args?: MutationCreateUserArgs[] | false, alias?: string  } 
  | { name: 'updateUser', args?: MutationUpdateUserArgs[] | false, alias?: string  } 
  | { name: 'updateManyUsers', args?: MutationUpdateManyUsersArgs[] | false, alias?: string  } 
  | { name: 'upsertUser', args?: MutationUpsertUserArgs[] | false, alias?: string  } 
  | { name: 'deleteUser', args?: MutationDeleteUserArgs[] | false, alias?: string  } 
  | { name: 'deleteManyUsers', args?: MutationDeleteManyUsersArgs[] | false, alias?: string  } 
  | { name: 'createHabit', args?: MutationCreateHabitArgs[] | false, alias?: string  } 
  | { name: 'updateHabit', args?: MutationUpdateHabitArgs[] | false, alias?: string  } 
  | { name: 'updateManyHabits', args?: MutationUpdateManyHabitsArgs[] | false, alias?: string  } 
  | { name: 'upsertHabit', args?: MutationUpsertHabitArgs[] | false, alias?: string  } 
  | { name: 'deleteHabit', args?: MutationDeleteHabitArgs[] | false, alias?: string  } 
  | { name: 'deleteManyHabits', args?: MutationDeleteManyHabitsArgs[] | false, alias?: string  } 
  | { name: 'createDayHabit', args?: MutationCreateDayHabitArgs[] | false, alias?: string  } 
  | { name: 'updateDayHabit', args?: MutationUpdateDayHabitArgs[] | false, alias?: string  } 
  | { name: 'updateManyDayHabits', args?: MutationUpdateManyDayHabitsArgs[] | false, alias?: string  } 
  | { name: 'upsertDayHabit', args?: MutationUpsertDayHabitArgs[] | false, alias?: string  } 
  | { name: 'deleteDayHabit', args?: MutationDeleteDayHabitArgs[] | false, alias?: string  } 
  | { name: 'deleteManyDayHabits', args?: MutationDeleteManyDayHabitsArgs[] | false, alias?: string  } 
  | { name: 'createMood', args?: MutationCreateMoodArgs[] | false, alias?: string  } 
  | { name: 'updateMood', args?: MutationUpdateMoodArgs[] | false, alias?: string  } 
  | { name: 'updateManyMoods', args?: MutationUpdateManyMoodsArgs[] | false, alias?: string  } 
  | { name: 'upsertMood', args?: MutationUpsertMoodArgs[] | false, alias?: string  } 
  | { name: 'deleteMood', args?: MutationDeleteMoodArgs[] | false, alias?: string  } 
  | { name: 'deleteManyMoods', args?: MutationDeleteManyMoodsArgs[] | false, alias?: string  } 

type MutationFields =
  | 'createPost'
  | 'updatePost'
  | 'updateManyPosts'
  | 'upsertPost'
  | 'deletePost'
  | 'deleteManyPosts'
  | 'createUser'
  | 'updateUser'
  | 'updateManyUsers'
  | 'upsertUser'
  | 'deleteUser'
  | 'deleteManyUsers'
  | 'createHabit'
  | 'updateHabit'
  | 'updateManyHabits'
  | 'upsertHabit'
  | 'deleteHabit'
  | 'deleteManyHabits'
  | 'createDayHabit'
  | 'updateDayHabit'
  | 'updateManyDayHabits'
  | 'upsertDayHabit'
  | 'deleteDayHabit'
  | 'deleteManyDayHabits'
  | 'createMood'
  | 'updateMood'
  | 'updateManyMoods'
  | 'upsertMood'
  | 'deleteMood'
  | 'deleteManyMoods'


type MutationCreatePostArgs =
  | 'data'
type MutationUpdatePostArgs =
  | 'data'
  | 'where'
type MutationUpdateManyPostsArgs =
  | 'data'
  | 'where'
type MutationUpsertPostArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeletePostArgs =
  | 'where'
type MutationDeleteManyPostsArgs =
  | 'where'
type MutationCreateUserArgs =
  | 'data'
type MutationUpdateUserArgs =
  | 'data'
  | 'where'
type MutationUpdateManyUsersArgs =
  | 'data'
  | 'where'
type MutationUpsertUserArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteUserArgs =
  | 'where'
type MutationDeleteManyUsersArgs =
  | 'where'
type MutationCreateHabitArgs =
  | 'data'
type MutationUpdateHabitArgs =
  | 'data'
  | 'where'
type MutationUpdateManyHabitsArgs =
  | 'data'
  | 'where'
type MutationUpsertHabitArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteHabitArgs =
  | 'where'
type MutationDeleteManyHabitsArgs =
  | 'where'
type MutationCreateDayHabitArgs =
  | 'data'
type MutationUpdateDayHabitArgs =
  | 'data'
  | 'where'
type MutationUpdateManyDayHabitsArgs =
  | 'data'
  | 'where'
type MutationUpsertDayHabitArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteDayHabitArgs =
  | 'where'
type MutationDeleteManyDayHabitsArgs =
  | 'where'
type MutationCreateMoodArgs =
  | 'data'
type MutationUpdateMoodArgs =
  | 'data'
  | 'where'
type MutationUpdateManyMoodsArgs =
  | 'data'
  | 'where'
type MutationUpsertMoodArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteMoodArgs =
  | 'where'
type MutationDeleteManyMoodsArgs =
  | 'where'
  

export interface MutationFieldDetails {
  createPost: {
    type: 'Post'
    args: Record<MutationCreatePostArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: PostCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Post> | prisma.Post
  }
  updatePost: {
    type: 'Post'
    args: Record<MutationUpdatePostArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: PostUpdateInput, where: PostWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Post | null> | prisma.Post | null
  }
  updateManyPosts: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyPostsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: PostUpdateManyMutationInput, where?: PostWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertPost: {
    type: 'Post'
    args: Record<MutationUpsertPostArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: PostWhereUniqueInput, create: PostCreateInput, update: PostUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Post> | prisma.Post
  }
  deletePost: {
    type: 'Post'
    args: Record<MutationDeletePostArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: PostWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Post | null> | prisma.Post | null
  }
  deleteManyPosts: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyPostsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: PostWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createUser: {
    type: 'User'
    args: Record<MutationCreateUserArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: UserCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User> | prisma.User
  }
  updateUser: {
    type: 'User'
    args: Record<MutationUpdateUserArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: UserUpdateInput, where: UserWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User | null> | prisma.User | null
  }
  updateManyUsers: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyUsersArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: UserUpdateManyMutationInput, where?: UserWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertUser: {
    type: 'User'
    args: Record<MutationUpsertUserArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: UserWhereUniqueInput, create: UserCreateInput, update: UserUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User> | prisma.User
  }
  deleteUser: {
    type: 'User'
    args: Record<MutationDeleteUserArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: UserWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User | null> | prisma.User | null
  }
  deleteManyUsers: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyUsersArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: UserWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createHabit: {
    type: 'Habit'
    args: Record<MutationCreateHabitArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: HabitCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Habit> | prisma.Habit
  }
  updateHabit: {
    type: 'Habit'
    args: Record<MutationUpdateHabitArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: HabitUpdateInput, where: HabitWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Habit | null> | prisma.Habit | null
  }
  updateManyHabits: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyHabitsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: HabitUpdateManyMutationInput, where?: HabitWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertHabit: {
    type: 'Habit'
    args: Record<MutationUpsertHabitArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: HabitWhereUniqueInput, create: HabitCreateInput, update: HabitUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Habit> | prisma.Habit
  }
  deleteHabit: {
    type: 'Habit'
    args: Record<MutationDeleteHabitArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: HabitWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Habit | null> | prisma.Habit | null
  }
  deleteManyHabits: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyHabitsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: HabitWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createDayHabit: {
    type: 'DayHabit'
    args: Record<MutationCreateDayHabitArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: DayHabitCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.DayHabit> | prisma.DayHabit
  }
  updateDayHabit: {
    type: 'DayHabit'
    args: Record<MutationUpdateDayHabitArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: DayHabitUpdateInput, where: DayHabitWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.DayHabit | null> | prisma.DayHabit | null
  }
  updateManyDayHabits: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyDayHabitsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: DayHabitUpdateManyMutationInput, where?: DayHabitWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertDayHabit: {
    type: 'DayHabit'
    args: Record<MutationUpsertDayHabitArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: DayHabitWhereUniqueInput, create: DayHabitCreateInput, update: DayHabitUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.DayHabit> | prisma.DayHabit
  }
  deleteDayHabit: {
    type: 'DayHabit'
    args: Record<MutationDeleteDayHabitArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: DayHabitWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.DayHabit | null> | prisma.DayHabit | null
  }
  deleteManyDayHabits: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyDayHabitsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: DayHabitWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createMood: {
    type: 'Mood'
    args: Record<MutationCreateMoodArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: MoodCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Mood> | prisma.Mood
  }
  updateMood: {
    type: 'Mood'
    args: Record<MutationUpdateMoodArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: MoodUpdateInput, where: MoodWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Mood | null> | prisma.Mood | null
  }
  updateManyMoods: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyMoodsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: MoodUpdateManyMutationInput, where?: MoodWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertMood: {
    type: 'Mood'
    args: Record<MutationUpsertMoodArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: MoodWhereUniqueInput, create: MoodCreateInput, update: MoodUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Mood> | prisma.Mood
  }
  deleteMood: {
    type: 'Mood'
    args: Record<MutationDeleteMoodArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: MoodWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Mood | null> | prisma.Mood | null
  }
  deleteManyMoods: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyMoodsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: MoodWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
}
  

// Types for BatchPayload

type BatchPayloadObject =
  | BatchPayloadFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type BatchPayloadFields =
  | 'count'



  

export interface BatchPayloadFieldDetails {
  count: {
    type: 'Long'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for Subscription

type SubscriptionObject =
  | SubscriptionFields
  | { name: 'post', args?: SubscriptionPostArgs[] | false, alias?: string  } 
  | { name: 'user', args?: SubscriptionUserArgs[] | false, alias?: string  } 
  | { name: 'habit', args?: SubscriptionHabitArgs[] | false, alias?: string  } 
  | { name: 'dayHabit', args?: SubscriptionDayHabitArgs[] | false, alias?: string  } 
  | { name: 'mood', args?: SubscriptionMoodArgs[] | false, alias?: string  } 

type SubscriptionFields =
  | 'post'
  | 'user'
  | 'habit'
  | 'dayHabit'
  | 'mood'


type SubscriptionPostArgs =
  | 'where'
type SubscriptionUserArgs =
  | 'where'
type SubscriptionHabitArgs =
  | 'where'
type SubscriptionDayHabitArgs =
  | 'where'
type SubscriptionMoodArgs =
  | 'where'
  

export interface SubscriptionFieldDetails {
  post: {
    type: 'PostSubscriptionPayload'
    args: Record<SubscriptionPostArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: PostSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PostSubscriptionPayload | null> | prisma.PostSubscriptionPayload | null
  }
  user: {
    type: 'UserSubscriptionPayload'
    args: Record<SubscriptionUserArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: UserSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.UserSubscriptionPayload | null> | prisma.UserSubscriptionPayload | null
  }
  habit: {
    type: 'HabitSubscriptionPayload'
    args: Record<SubscriptionHabitArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: HabitSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.HabitSubscriptionPayload | null> | prisma.HabitSubscriptionPayload | null
  }
  dayHabit: {
    type: 'DayHabitSubscriptionPayload'
    args: Record<SubscriptionDayHabitArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: DayHabitSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.DayHabitSubscriptionPayload | null> | prisma.DayHabitSubscriptionPayload | null
  }
  mood: {
    type: 'MoodSubscriptionPayload'
    args: Record<SubscriptionMoodArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: MoodSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MoodSubscriptionPayload | null> | prisma.MoodSubscriptionPayload | null
  }
}
  

// Types for PostSubscriptionPayload

type PostSubscriptionPayloadObject =
  | PostSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type PostSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface PostSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"PostSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'Post'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"PostSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Post | null> | prisma.Post | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'PostPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"PostSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PostPreviousValues | null> | prisma.PostPreviousValues | null
  }
}
  

// Types for PostPreviousValues

type PostPreviousValuesObject =
  | PostPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 
  | { name: 'published', args?: [] | false, alias?: string  } 
  | { name: 'title', args?: [] | false, alias?: string  } 
  | { name: 'content', args?: [] | false, alias?: string  } 

type PostPreviousValuesFields =
  | 'id'
  | 'createdAt'
  | 'updatedAt'
  | 'published'
  | 'title'
  | 'content'



  

export interface PostPreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  published: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  title: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  content: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for UserSubscriptionPayload

type UserSubscriptionPayloadObject =
  | UserSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type UserSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface UserSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"UserSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'User'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"UserSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User | null> | prisma.User | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'UserPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"UserSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.UserPreviousValues | null> | prisma.UserPreviousValues | null
  }
}
  

// Types for UserPreviousValues

type UserPreviousValuesObject =
  | UserPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'email', args?: [] | false, alias?: string  } 
  | { name: 'password', args?: [] | false, alias?: string  } 
  | { name: 'name', args?: [] | false, alias?: string  } 
  | { name: 'pushToken', args?: [] | false, alias?: string  } 
  | { name: 'isPro', args?: [] | false, alias?: string  } 

type UserPreviousValuesFields =
  | 'id'
  | 'email'
  | 'password'
  | 'name'
  | 'pushToken'
  | 'isPro'



  

export interface UserPreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  email: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  password: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  pushToken: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  isPro: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for HabitSubscriptionPayload

type HabitSubscriptionPayloadObject =
  | HabitSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type HabitSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface HabitSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"HabitSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'Habit'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"HabitSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Habit | null> | prisma.Habit | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'HabitPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"HabitSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.HabitPreviousValues | null> | prisma.HabitPreviousValues | null
  }
}
  

// Types for HabitPreviousValues

type HabitPreviousValuesObject =
  | HabitPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'title', args?: [] | false, alias?: string  } 
  | { name: 'description', args?: [] | false, alias?: string  } 
  | { name: 'starred', args?: [] | false, alias?: string  } 

type HabitPreviousValuesFields =
  | 'id'
  | 'title'
  | 'description'
  | 'starred'



  

export interface HabitPreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  title: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  description: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  starred: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for DayHabitSubscriptionPayload

type DayHabitSubscriptionPayloadObject =
  | DayHabitSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type DayHabitSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface DayHabitSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"DayHabitSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'DayHabit'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"DayHabitSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.DayHabit | null> | prisma.DayHabit | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'DayHabitPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"DayHabitSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.DayHabitPreviousValues | null> | prisma.DayHabitPreviousValues | null
  }
}
  

// Types for DayHabitPreviousValues

type DayHabitPreviousValuesObject =
  | DayHabitPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'done', args?: [] | false, alias?: string  } 
  | { name: 'date', args?: [] | false, alias?: string  } 

type DayHabitPreviousValuesFields =
  | 'id'
  | 'done'
  | 'date'



  

export interface DayHabitPreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  done: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  date: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for MoodSubscriptionPayload

type MoodSubscriptionPayloadObject =
  | MoodSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type MoodSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface MoodSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"MoodSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'Mood'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"MoodSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Mood | null> | prisma.Mood | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'MoodPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"MoodSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MoodPreviousValues | null> | prisma.MoodPreviousValues | null
  }
}
  

// Types for MoodPreviousValues

type MoodPreviousValuesObject =
  | MoodPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'type', args?: [] | false, alias?: string  } 
  | { name: 'date', args?: [] | false, alias?: string  } 

type MoodPreviousValuesFields =
  | 'id'
  | 'type'
  | 'date'



  

export interface MoodPreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  type: {
    type: 'MoodTypes'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"MoodPreviousValues">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MoodTypes> | prisma.MoodTypes
  }
  date: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  


export interface PostWhereUniqueInput {
  id?: string | null
}
export type PostWhereUniqueInputInputObject =
  | Extract<keyof PostWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  
export interface PostWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  createdAt?: string | null
  createdAt_not?: string | null
  createdAt_in?: string[]
  createdAt_not_in?: string[]
  createdAt_lt?: string | null
  createdAt_lte?: string | null
  createdAt_gt?: string | null
  createdAt_gte?: string | null
  updatedAt?: string | null
  updatedAt_not?: string | null
  updatedAt_in?: string[]
  updatedAt_not_in?: string[]
  updatedAt_lt?: string | null
  updatedAt_lte?: string | null
  updatedAt_gt?: string | null
  updatedAt_gte?: string | null
  published?: boolean | null
  published_not?: boolean | null
  title?: string | null
  title_not?: string | null
  title_in?: string[]
  title_not_in?: string[]
  title_lt?: string | null
  title_lte?: string | null
  title_gt?: string | null
  title_gte?: string | null
  title_contains?: string | null
  title_not_contains?: string | null
  title_starts_with?: string | null
  title_not_starts_with?: string | null
  title_ends_with?: string | null
  title_not_ends_with?: string | null
  content?: string | null
  content_not?: string | null
  content_in?: string[]
  content_not_in?: string[]
  content_lt?: string | null
  content_lte?: string | null
  content_gt?: string | null
  content_gte?: string | null
  content_contains?: string | null
  content_not_contains?: string | null
  content_starts_with?: string | null
  content_not_starts_with?: string | null
  content_ends_with?: string | null
  content_not_ends_with?: string | null
  author?: UserWhereInput | null
  AND?: PostWhereInput[]
  OR?: PostWhereInput[]
  NOT?: PostWhereInput[]
}
export type PostWhereInputInputObject =
  | Extract<keyof PostWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'createdAt', alias?: string  } 
  | { name: 'createdAt_not', alias?: string  } 
  | { name: 'createdAt_in', alias?: string  } 
  | { name: 'createdAt_not_in', alias?: string  } 
  | { name: 'createdAt_lt', alias?: string  } 
  | { name: 'createdAt_lte', alias?: string  } 
  | { name: 'createdAt_gt', alias?: string  } 
  | { name: 'createdAt_gte', alias?: string  } 
  | { name: 'updatedAt', alias?: string  } 
  | { name: 'updatedAt_not', alias?: string  } 
  | { name: 'updatedAt_in', alias?: string  } 
  | { name: 'updatedAt_not_in', alias?: string  } 
  | { name: 'updatedAt_lt', alias?: string  } 
  | { name: 'updatedAt_lte', alias?: string  } 
  | { name: 'updatedAt_gt', alias?: string  } 
  | { name: 'updatedAt_gte', alias?: string  } 
  | { name: 'published', alias?: string  } 
  | { name: 'published_not', alias?: string  } 
  | { name: 'title', alias?: string  } 
  | { name: 'title_not', alias?: string  } 
  | { name: 'title_in', alias?: string  } 
  | { name: 'title_not_in', alias?: string  } 
  | { name: 'title_lt', alias?: string  } 
  | { name: 'title_lte', alias?: string  } 
  | { name: 'title_gt', alias?: string  } 
  | { name: 'title_gte', alias?: string  } 
  | { name: 'title_contains', alias?: string  } 
  | { name: 'title_not_contains', alias?: string  } 
  | { name: 'title_starts_with', alias?: string  } 
  | { name: 'title_not_starts_with', alias?: string  } 
  | { name: 'title_ends_with', alias?: string  } 
  | { name: 'title_not_ends_with', alias?: string  } 
  | { name: 'content', alias?: string  } 
  | { name: 'content_not', alias?: string  } 
  | { name: 'content_in', alias?: string  } 
  | { name: 'content_not_in', alias?: string  } 
  | { name: 'content_lt', alias?: string  } 
  | { name: 'content_lte', alias?: string  } 
  | { name: 'content_gt', alias?: string  } 
  | { name: 'content_gte', alias?: string  } 
  | { name: 'content_contains', alias?: string  } 
  | { name: 'content_not_contains', alias?: string  } 
  | { name: 'content_starts_with', alias?: string  } 
  | { name: 'content_not_starts_with', alias?: string  } 
  | { name: 'content_ends_with', alias?: string  } 
  | { name: 'content_not_ends_with', alias?: string  } 
  | { name: 'author', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface UserWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  email?: string | null
  email_not?: string | null
  email_in?: string[]
  email_not_in?: string[]
  email_lt?: string | null
  email_lte?: string | null
  email_gt?: string | null
  email_gte?: string | null
  email_contains?: string | null
  email_not_contains?: string | null
  email_starts_with?: string | null
  email_not_starts_with?: string | null
  email_ends_with?: string | null
  email_not_ends_with?: string | null
  password?: string | null
  password_not?: string | null
  password_in?: string[]
  password_not_in?: string[]
  password_lt?: string | null
  password_lte?: string | null
  password_gt?: string | null
  password_gte?: string | null
  password_contains?: string | null
  password_not_contains?: string | null
  password_starts_with?: string | null
  password_not_starts_with?: string | null
  password_ends_with?: string | null
  password_not_ends_with?: string | null
  name?: string | null
  name_not?: string | null
  name_in?: string[]
  name_not_in?: string[]
  name_lt?: string | null
  name_lte?: string | null
  name_gt?: string | null
  name_gte?: string | null
  name_contains?: string | null
  name_not_contains?: string | null
  name_starts_with?: string | null
  name_not_starts_with?: string | null
  name_ends_with?: string | null
  name_not_ends_with?: string | null
  posts_every?: PostWhereInput | null
  posts_some?: PostWhereInput | null
  posts_none?: PostWhereInput | null
  pushToken?: string | null
  pushToken_not?: string | null
  pushToken_in?: string[]
  pushToken_not_in?: string[]
  pushToken_lt?: string | null
  pushToken_lte?: string | null
  pushToken_gt?: string | null
  pushToken_gte?: string | null
  pushToken_contains?: string | null
  pushToken_not_contains?: string | null
  pushToken_starts_with?: string | null
  pushToken_not_starts_with?: string | null
  pushToken_ends_with?: string | null
  pushToken_not_ends_with?: string | null
  habits_every?: HabitWhereInput | null
  habits_some?: HabitWhereInput | null
  habits_none?: HabitWhereInput | null
  moods_every?: MoodWhereInput | null
  moods_some?: MoodWhereInput | null
  moods_none?: MoodWhereInput | null
  isPro?: boolean | null
  isPro_not?: boolean | null
  AND?: UserWhereInput[]
  OR?: UserWhereInput[]
  NOT?: UserWhereInput[]
}
export type UserWhereInputInputObject =
  | Extract<keyof UserWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'email', alias?: string  } 
  | { name: 'email_not', alias?: string  } 
  | { name: 'email_in', alias?: string  } 
  | { name: 'email_not_in', alias?: string  } 
  | { name: 'email_lt', alias?: string  } 
  | { name: 'email_lte', alias?: string  } 
  | { name: 'email_gt', alias?: string  } 
  | { name: 'email_gte', alias?: string  } 
  | { name: 'email_contains', alias?: string  } 
  | { name: 'email_not_contains', alias?: string  } 
  | { name: 'email_starts_with', alias?: string  } 
  | { name: 'email_not_starts_with', alias?: string  } 
  | { name: 'email_ends_with', alias?: string  } 
  | { name: 'email_not_ends_with', alias?: string  } 
  | { name: 'password', alias?: string  } 
  | { name: 'password_not', alias?: string  } 
  | { name: 'password_in', alias?: string  } 
  | { name: 'password_not_in', alias?: string  } 
  | { name: 'password_lt', alias?: string  } 
  | { name: 'password_lte', alias?: string  } 
  | { name: 'password_gt', alias?: string  } 
  | { name: 'password_gte', alias?: string  } 
  | { name: 'password_contains', alias?: string  } 
  | { name: 'password_not_contains', alias?: string  } 
  | { name: 'password_starts_with', alias?: string  } 
  | { name: 'password_not_starts_with', alias?: string  } 
  | { name: 'password_ends_with', alias?: string  } 
  | { name: 'password_not_ends_with', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'name_not', alias?: string  } 
  | { name: 'name_in', alias?: string  } 
  | { name: 'name_not_in', alias?: string  } 
  | { name: 'name_lt', alias?: string  } 
  | { name: 'name_lte', alias?: string  } 
  | { name: 'name_gt', alias?: string  } 
  | { name: 'name_gte', alias?: string  } 
  | { name: 'name_contains', alias?: string  } 
  | { name: 'name_not_contains', alias?: string  } 
  | { name: 'name_starts_with', alias?: string  } 
  | { name: 'name_not_starts_with', alias?: string  } 
  | { name: 'name_ends_with', alias?: string  } 
  | { name: 'name_not_ends_with', alias?: string  } 
  | { name: 'posts_every', alias?: string  } 
  | { name: 'posts_some', alias?: string  } 
  | { name: 'posts_none', alias?: string  } 
  | { name: 'pushToken', alias?: string  } 
  | { name: 'pushToken_not', alias?: string  } 
  | { name: 'pushToken_in', alias?: string  } 
  | { name: 'pushToken_not_in', alias?: string  } 
  | { name: 'pushToken_lt', alias?: string  } 
  | { name: 'pushToken_lte', alias?: string  } 
  | { name: 'pushToken_gt', alias?: string  } 
  | { name: 'pushToken_gte', alias?: string  } 
  | { name: 'pushToken_contains', alias?: string  } 
  | { name: 'pushToken_not_contains', alias?: string  } 
  | { name: 'pushToken_starts_with', alias?: string  } 
  | { name: 'pushToken_not_starts_with', alias?: string  } 
  | { name: 'pushToken_ends_with', alias?: string  } 
  | { name: 'pushToken_not_ends_with', alias?: string  } 
  | { name: 'habits_every', alias?: string  } 
  | { name: 'habits_some', alias?: string  } 
  | { name: 'habits_none', alias?: string  } 
  | { name: 'moods_every', alias?: string  } 
  | { name: 'moods_some', alias?: string  } 
  | { name: 'moods_none', alias?: string  } 
  | { name: 'isPro', alias?: string  } 
  | { name: 'isPro_not', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface HabitWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  title?: string | null
  title_not?: string | null
  title_in?: string[]
  title_not_in?: string[]
  title_lt?: string | null
  title_lte?: string | null
  title_gt?: string | null
  title_gte?: string | null
  title_contains?: string | null
  title_not_contains?: string | null
  title_starts_with?: string | null
  title_not_starts_with?: string | null
  title_ends_with?: string | null
  title_not_ends_with?: string | null
  description?: string | null
  description_not?: string | null
  description_in?: string[]
  description_not_in?: string[]
  description_lt?: string | null
  description_lte?: string | null
  description_gt?: string | null
  description_gte?: string | null
  description_contains?: string | null
  description_not_contains?: string | null
  description_starts_with?: string | null
  description_not_starts_with?: string | null
  description_ends_with?: string | null
  description_not_ends_with?: string | null
  starred?: boolean | null
  starred_not?: boolean | null
  owner?: UserWhereInput | null
  habits_every?: DayHabitWhereInput | null
  habits_some?: DayHabitWhereInput | null
  habits_none?: DayHabitWhereInput | null
  AND?: HabitWhereInput[]
  OR?: HabitWhereInput[]
  NOT?: HabitWhereInput[]
}
export type HabitWhereInputInputObject =
  | Extract<keyof HabitWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'title', alias?: string  } 
  | { name: 'title_not', alias?: string  } 
  | { name: 'title_in', alias?: string  } 
  | { name: 'title_not_in', alias?: string  } 
  | { name: 'title_lt', alias?: string  } 
  | { name: 'title_lte', alias?: string  } 
  | { name: 'title_gt', alias?: string  } 
  | { name: 'title_gte', alias?: string  } 
  | { name: 'title_contains', alias?: string  } 
  | { name: 'title_not_contains', alias?: string  } 
  | { name: 'title_starts_with', alias?: string  } 
  | { name: 'title_not_starts_with', alias?: string  } 
  | { name: 'title_ends_with', alias?: string  } 
  | { name: 'title_not_ends_with', alias?: string  } 
  | { name: 'description', alias?: string  } 
  | { name: 'description_not', alias?: string  } 
  | { name: 'description_in', alias?: string  } 
  | { name: 'description_not_in', alias?: string  } 
  | { name: 'description_lt', alias?: string  } 
  | { name: 'description_lte', alias?: string  } 
  | { name: 'description_gt', alias?: string  } 
  | { name: 'description_gte', alias?: string  } 
  | { name: 'description_contains', alias?: string  } 
  | { name: 'description_not_contains', alias?: string  } 
  | { name: 'description_starts_with', alias?: string  } 
  | { name: 'description_not_starts_with', alias?: string  } 
  | { name: 'description_ends_with', alias?: string  } 
  | { name: 'description_not_ends_with', alias?: string  } 
  | { name: 'starred', alias?: string  } 
  | { name: 'starred_not', alias?: string  } 
  | { name: 'owner', alias?: string  } 
  | { name: 'habits_every', alias?: string  } 
  | { name: 'habits_some', alias?: string  } 
  | { name: 'habits_none', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface DayHabitWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  done?: boolean | null
  done_not?: boolean | null
  date?: string | null
  date_not?: string | null
  date_in?: string[]
  date_not_in?: string[]
  date_lt?: string | null
  date_lte?: string | null
  date_gt?: string | null
  date_gte?: string | null
  habit?: HabitWhereInput | null
  AND?: DayHabitWhereInput[]
  OR?: DayHabitWhereInput[]
  NOT?: DayHabitWhereInput[]
}
export type DayHabitWhereInputInputObject =
  | Extract<keyof DayHabitWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'done', alias?: string  } 
  | { name: 'done_not', alias?: string  } 
  | { name: 'date', alias?: string  } 
  | { name: 'date_not', alias?: string  } 
  | { name: 'date_in', alias?: string  } 
  | { name: 'date_not_in', alias?: string  } 
  | { name: 'date_lt', alias?: string  } 
  | { name: 'date_lte', alias?: string  } 
  | { name: 'date_gt', alias?: string  } 
  | { name: 'date_gte', alias?: string  } 
  | { name: 'habit', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface MoodWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  type?: prisma.MoodTypes | null
  type_not?: prisma.MoodTypes | null
  type_in?: prisma.MoodTypes[]
  type_not_in?: prisma.MoodTypes[]
  date?: string | null
  date_not?: string | null
  date_in?: string[]
  date_not_in?: string[]
  date_lt?: string | null
  date_lte?: string | null
  date_gt?: string | null
  date_gte?: string | null
  owner?: UserWhereInput | null
  AND?: MoodWhereInput[]
  OR?: MoodWhereInput[]
  NOT?: MoodWhereInput[]
}
export type MoodWhereInputInputObject =
  | Extract<keyof MoodWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'type', alias?: string  } 
  | { name: 'type_not', alias?: string  } 
  | { name: 'type_in', alias?: string  } 
  | { name: 'type_not_in', alias?: string  } 
  | { name: 'date', alias?: string  } 
  | { name: 'date_not', alias?: string  } 
  | { name: 'date_in', alias?: string  } 
  | { name: 'date_not_in', alias?: string  } 
  | { name: 'date_lt', alias?: string  } 
  | { name: 'date_lte', alias?: string  } 
  | { name: 'date_gt', alias?: string  } 
  | { name: 'date_gte', alias?: string  } 
  | { name: 'owner', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface UserWhereUniqueInput {
  id?: string | null
  email?: string | null
}
export type UserWhereUniqueInputInputObject =
  | Extract<keyof UserWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'email', alias?: string  } 
  
export interface HabitWhereUniqueInput {
  id?: string | null
}
export type HabitWhereUniqueInputInputObject =
  | Extract<keyof HabitWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  
export interface DayHabitWhereUniqueInput {
  id?: string | null
}
export type DayHabitWhereUniqueInputInputObject =
  | Extract<keyof DayHabitWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  
export interface MoodWhereUniqueInput {
  id?: string | null
}
export type MoodWhereUniqueInputInputObject =
  | Extract<keyof MoodWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  
export interface PostCreateInput {
  published?: boolean | null
  title?: string
  content?: string
  author?: UserCreateOneWithoutPostsInput
}
export type PostCreateInputInputObject =
  | Extract<keyof PostCreateInput, string>
  | { name: 'published', alias?: string  } 
  | { name: 'title', alias?: string  } 
  | { name: 'content', alias?: string  } 
  | { name: 'author', alias?: string  } 
  
export interface UserCreateOneWithoutPostsInput {
  create?: UserCreateWithoutPostsInput | null
  connect?: UserWhereUniqueInput | null
}
export type UserCreateOneWithoutPostsInputInputObject =
  | Extract<keyof UserCreateOneWithoutPostsInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface UserCreateWithoutPostsInput {
  email?: string
  password?: string
  name?: string
  pushToken?: string | null
  habits?: HabitCreateManyWithoutOwnerInput | null
  moods?: MoodCreateManyWithoutOwnerInput | null
  isPro?: boolean | null
}
export type UserCreateWithoutPostsInputInputObject =
  | Extract<keyof UserCreateWithoutPostsInput, string>
  | { name: 'email', alias?: string  } 
  | { name: 'password', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'pushToken', alias?: string  } 
  | { name: 'habits', alias?: string  } 
  | { name: 'moods', alias?: string  } 
  | { name: 'isPro', alias?: string  } 
  
export interface HabitCreateManyWithoutOwnerInput {
  create?: HabitCreateWithoutOwnerInput[]
  connect?: HabitWhereUniqueInput[]
}
export type HabitCreateManyWithoutOwnerInputInputObject =
  | Extract<keyof HabitCreateManyWithoutOwnerInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface HabitCreateWithoutOwnerInput {
  title?: string
  description?: string | null
  starred?: boolean | null
  habits?: DayHabitCreateManyWithoutHabitInput | null
}
export type HabitCreateWithoutOwnerInputInputObject =
  | Extract<keyof HabitCreateWithoutOwnerInput, string>
  | { name: 'title', alias?: string  } 
  | { name: 'description', alias?: string  } 
  | { name: 'starred', alias?: string  } 
  | { name: 'habits', alias?: string  } 
  
export interface DayHabitCreateManyWithoutHabitInput {
  create?: DayHabitCreateWithoutHabitInput[]
  connect?: DayHabitWhereUniqueInput[]
}
export type DayHabitCreateManyWithoutHabitInputInputObject =
  | Extract<keyof DayHabitCreateManyWithoutHabitInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface DayHabitCreateWithoutHabitInput {
  done?: boolean | null
  date?: string
}
export type DayHabitCreateWithoutHabitInputInputObject =
  | Extract<keyof DayHabitCreateWithoutHabitInput, string>
  | { name: 'done', alias?: string  } 
  | { name: 'date', alias?: string  } 
  
export interface MoodCreateManyWithoutOwnerInput {
  create?: MoodCreateWithoutOwnerInput[]
  connect?: MoodWhereUniqueInput[]
}
export type MoodCreateManyWithoutOwnerInputInputObject =
  | Extract<keyof MoodCreateManyWithoutOwnerInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface MoodCreateWithoutOwnerInput {
  type?: prisma.MoodTypes
  date?: string
}
export type MoodCreateWithoutOwnerInputInputObject =
  | Extract<keyof MoodCreateWithoutOwnerInput, string>
  | { name: 'type', alias?: string  } 
  | { name: 'date', alias?: string  } 
  
export interface PostUpdateInput {
  published?: boolean | null
  title?: string | null
  content?: string | null
  author?: UserUpdateOneRequiredWithoutPostsInput | null
}
export type PostUpdateInputInputObject =
  | Extract<keyof PostUpdateInput, string>
  | { name: 'published', alias?: string  } 
  | { name: 'title', alias?: string  } 
  | { name: 'content', alias?: string  } 
  | { name: 'author', alias?: string  } 
  
export interface UserUpdateOneRequiredWithoutPostsInput {
  create?: UserCreateWithoutPostsInput | null
  update?: UserUpdateWithoutPostsDataInput | null
  upsert?: UserUpsertWithoutPostsInput | null
  connect?: UserWhereUniqueInput | null
}
export type UserUpdateOneRequiredWithoutPostsInputInputObject =
  | Extract<keyof UserUpdateOneRequiredWithoutPostsInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface UserUpdateWithoutPostsDataInput {
  email?: string | null
  password?: string | null
  name?: string | null
  pushToken?: string | null
  habits?: HabitUpdateManyWithoutOwnerInput | null
  moods?: MoodUpdateManyWithoutOwnerInput | null
  isPro?: boolean | null
}
export type UserUpdateWithoutPostsDataInputInputObject =
  | Extract<keyof UserUpdateWithoutPostsDataInput, string>
  | { name: 'email', alias?: string  } 
  | { name: 'password', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'pushToken', alias?: string  } 
  | { name: 'habits', alias?: string  } 
  | { name: 'moods', alias?: string  } 
  | { name: 'isPro', alias?: string  } 
  
export interface HabitUpdateManyWithoutOwnerInput {
  create?: HabitCreateWithoutOwnerInput[]
  delete?: HabitWhereUniqueInput[]
  connect?: HabitWhereUniqueInput[]
  set?: HabitWhereUniqueInput[]
  disconnect?: HabitWhereUniqueInput[]
  update?: HabitUpdateWithWhereUniqueWithoutOwnerInput[]
  upsert?: HabitUpsertWithWhereUniqueWithoutOwnerInput[]
  deleteMany?: HabitScalarWhereInput[]
  updateMany?: HabitUpdateManyWithWhereNestedInput[]
}
export type HabitUpdateManyWithoutOwnerInputInputObject =
  | Extract<keyof HabitUpdateManyWithoutOwnerInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  | { name: 'set', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'deleteMany', alias?: string  } 
  | { name: 'updateMany', alias?: string  } 
  
export interface HabitUpdateWithWhereUniqueWithoutOwnerInput {
  where?: HabitWhereUniqueInput
  data?: HabitUpdateWithoutOwnerDataInput
}
export type HabitUpdateWithWhereUniqueWithoutOwnerInputInputObject =
  | Extract<keyof HabitUpdateWithWhereUniqueWithoutOwnerInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface HabitUpdateWithoutOwnerDataInput {
  title?: string | null
  description?: string | null
  starred?: boolean | null
  habits?: DayHabitUpdateManyWithoutHabitInput | null
}
export type HabitUpdateWithoutOwnerDataInputInputObject =
  | Extract<keyof HabitUpdateWithoutOwnerDataInput, string>
  | { name: 'title', alias?: string  } 
  | { name: 'description', alias?: string  } 
  | { name: 'starred', alias?: string  } 
  | { name: 'habits', alias?: string  } 
  
export interface DayHabitUpdateManyWithoutHabitInput {
  create?: DayHabitCreateWithoutHabitInput[]
  delete?: DayHabitWhereUniqueInput[]
  connect?: DayHabitWhereUniqueInput[]
  set?: DayHabitWhereUniqueInput[]
  disconnect?: DayHabitWhereUniqueInput[]
  update?: DayHabitUpdateWithWhereUniqueWithoutHabitInput[]
  upsert?: DayHabitUpsertWithWhereUniqueWithoutHabitInput[]
  deleteMany?: DayHabitScalarWhereInput[]
  updateMany?: DayHabitUpdateManyWithWhereNestedInput[]
}
export type DayHabitUpdateManyWithoutHabitInputInputObject =
  | Extract<keyof DayHabitUpdateManyWithoutHabitInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  | { name: 'set', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'deleteMany', alias?: string  } 
  | { name: 'updateMany', alias?: string  } 
  
export interface DayHabitUpdateWithWhereUniqueWithoutHabitInput {
  where?: DayHabitWhereUniqueInput
  data?: DayHabitUpdateWithoutHabitDataInput
}
export type DayHabitUpdateWithWhereUniqueWithoutHabitInputInputObject =
  | Extract<keyof DayHabitUpdateWithWhereUniqueWithoutHabitInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface DayHabitUpdateWithoutHabitDataInput {
  done?: boolean | null
  date?: string | null
}
export type DayHabitUpdateWithoutHabitDataInputInputObject =
  | Extract<keyof DayHabitUpdateWithoutHabitDataInput, string>
  | { name: 'done', alias?: string  } 
  | { name: 'date', alias?: string  } 
  
export interface DayHabitUpsertWithWhereUniqueWithoutHabitInput {
  where?: DayHabitWhereUniqueInput
  update?: DayHabitUpdateWithoutHabitDataInput
  create?: DayHabitCreateWithoutHabitInput
}
export type DayHabitUpsertWithWhereUniqueWithoutHabitInputInputObject =
  | Extract<keyof DayHabitUpsertWithWhereUniqueWithoutHabitInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface DayHabitScalarWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  done?: boolean | null
  done_not?: boolean | null
  date?: string | null
  date_not?: string | null
  date_in?: string[]
  date_not_in?: string[]
  date_lt?: string | null
  date_lte?: string | null
  date_gt?: string | null
  date_gte?: string | null
  AND?: DayHabitScalarWhereInput[]
  OR?: DayHabitScalarWhereInput[]
  NOT?: DayHabitScalarWhereInput[]
}
export type DayHabitScalarWhereInputInputObject =
  | Extract<keyof DayHabitScalarWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'done', alias?: string  } 
  | { name: 'done_not', alias?: string  } 
  | { name: 'date', alias?: string  } 
  | { name: 'date_not', alias?: string  } 
  | { name: 'date_in', alias?: string  } 
  | { name: 'date_not_in', alias?: string  } 
  | { name: 'date_lt', alias?: string  } 
  | { name: 'date_lte', alias?: string  } 
  | { name: 'date_gt', alias?: string  } 
  | { name: 'date_gte', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface DayHabitUpdateManyWithWhereNestedInput {
  where?: DayHabitScalarWhereInput
  data?: DayHabitUpdateManyDataInput
}
export type DayHabitUpdateManyWithWhereNestedInputInputObject =
  | Extract<keyof DayHabitUpdateManyWithWhereNestedInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface DayHabitUpdateManyDataInput {
  done?: boolean | null
  date?: string | null
}
export type DayHabitUpdateManyDataInputInputObject =
  | Extract<keyof DayHabitUpdateManyDataInput, string>
  | { name: 'done', alias?: string  } 
  | { name: 'date', alias?: string  } 
  
export interface HabitUpsertWithWhereUniqueWithoutOwnerInput {
  where?: HabitWhereUniqueInput
  update?: HabitUpdateWithoutOwnerDataInput
  create?: HabitCreateWithoutOwnerInput
}
export type HabitUpsertWithWhereUniqueWithoutOwnerInputInputObject =
  | Extract<keyof HabitUpsertWithWhereUniqueWithoutOwnerInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface HabitScalarWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  title?: string | null
  title_not?: string | null
  title_in?: string[]
  title_not_in?: string[]
  title_lt?: string | null
  title_lte?: string | null
  title_gt?: string | null
  title_gte?: string | null
  title_contains?: string | null
  title_not_contains?: string | null
  title_starts_with?: string | null
  title_not_starts_with?: string | null
  title_ends_with?: string | null
  title_not_ends_with?: string | null
  description?: string | null
  description_not?: string | null
  description_in?: string[]
  description_not_in?: string[]
  description_lt?: string | null
  description_lte?: string | null
  description_gt?: string | null
  description_gte?: string | null
  description_contains?: string | null
  description_not_contains?: string | null
  description_starts_with?: string | null
  description_not_starts_with?: string | null
  description_ends_with?: string | null
  description_not_ends_with?: string | null
  starred?: boolean | null
  starred_not?: boolean | null
  AND?: HabitScalarWhereInput[]
  OR?: HabitScalarWhereInput[]
  NOT?: HabitScalarWhereInput[]
}
export type HabitScalarWhereInputInputObject =
  | Extract<keyof HabitScalarWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'title', alias?: string  } 
  | { name: 'title_not', alias?: string  } 
  | { name: 'title_in', alias?: string  } 
  | { name: 'title_not_in', alias?: string  } 
  | { name: 'title_lt', alias?: string  } 
  | { name: 'title_lte', alias?: string  } 
  | { name: 'title_gt', alias?: string  } 
  | { name: 'title_gte', alias?: string  } 
  | { name: 'title_contains', alias?: string  } 
  | { name: 'title_not_contains', alias?: string  } 
  | { name: 'title_starts_with', alias?: string  } 
  | { name: 'title_not_starts_with', alias?: string  } 
  | { name: 'title_ends_with', alias?: string  } 
  | { name: 'title_not_ends_with', alias?: string  } 
  | { name: 'description', alias?: string  } 
  | { name: 'description_not', alias?: string  } 
  | { name: 'description_in', alias?: string  } 
  | { name: 'description_not_in', alias?: string  } 
  | { name: 'description_lt', alias?: string  } 
  | { name: 'description_lte', alias?: string  } 
  | { name: 'description_gt', alias?: string  } 
  | { name: 'description_gte', alias?: string  } 
  | { name: 'description_contains', alias?: string  } 
  | { name: 'description_not_contains', alias?: string  } 
  | { name: 'description_starts_with', alias?: string  } 
  | { name: 'description_not_starts_with', alias?: string  } 
  | { name: 'description_ends_with', alias?: string  } 
  | { name: 'description_not_ends_with', alias?: string  } 
  | { name: 'starred', alias?: string  } 
  | { name: 'starred_not', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface HabitUpdateManyWithWhereNestedInput {
  where?: HabitScalarWhereInput
  data?: HabitUpdateManyDataInput
}
export type HabitUpdateManyWithWhereNestedInputInputObject =
  | Extract<keyof HabitUpdateManyWithWhereNestedInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface HabitUpdateManyDataInput {
  title?: string | null
  description?: string | null
  starred?: boolean | null
}
export type HabitUpdateManyDataInputInputObject =
  | Extract<keyof HabitUpdateManyDataInput, string>
  | { name: 'title', alias?: string  } 
  | { name: 'description', alias?: string  } 
  | { name: 'starred', alias?: string  } 
  
export interface MoodUpdateManyWithoutOwnerInput {
  create?: MoodCreateWithoutOwnerInput[]
  delete?: MoodWhereUniqueInput[]
  connect?: MoodWhereUniqueInput[]
  set?: MoodWhereUniqueInput[]
  disconnect?: MoodWhereUniqueInput[]
  update?: MoodUpdateWithWhereUniqueWithoutOwnerInput[]
  upsert?: MoodUpsertWithWhereUniqueWithoutOwnerInput[]
  deleteMany?: MoodScalarWhereInput[]
  updateMany?: MoodUpdateManyWithWhereNestedInput[]
}
export type MoodUpdateManyWithoutOwnerInputInputObject =
  | Extract<keyof MoodUpdateManyWithoutOwnerInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  | { name: 'set', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'deleteMany', alias?: string  } 
  | { name: 'updateMany', alias?: string  } 
  
export interface MoodUpdateWithWhereUniqueWithoutOwnerInput {
  where?: MoodWhereUniqueInput
  data?: MoodUpdateWithoutOwnerDataInput
}
export type MoodUpdateWithWhereUniqueWithoutOwnerInputInputObject =
  | Extract<keyof MoodUpdateWithWhereUniqueWithoutOwnerInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface MoodUpdateWithoutOwnerDataInput {
  type?: prisma.MoodTypes | null
  date?: string | null
}
export type MoodUpdateWithoutOwnerDataInputInputObject =
  | Extract<keyof MoodUpdateWithoutOwnerDataInput, string>
  | { name: 'type', alias?: string  } 
  | { name: 'date', alias?: string  } 
  
export interface MoodUpsertWithWhereUniqueWithoutOwnerInput {
  where?: MoodWhereUniqueInput
  update?: MoodUpdateWithoutOwnerDataInput
  create?: MoodCreateWithoutOwnerInput
}
export type MoodUpsertWithWhereUniqueWithoutOwnerInputInputObject =
  | Extract<keyof MoodUpsertWithWhereUniqueWithoutOwnerInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface MoodScalarWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  type?: prisma.MoodTypes | null
  type_not?: prisma.MoodTypes | null
  type_in?: prisma.MoodTypes[]
  type_not_in?: prisma.MoodTypes[]
  date?: string | null
  date_not?: string | null
  date_in?: string[]
  date_not_in?: string[]
  date_lt?: string | null
  date_lte?: string | null
  date_gt?: string | null
  date_gte?: string | null
  AND?: MoodScalarWhereInput[]
  OR?: MoodScalarWhereInput[]
  NOT?: MoodScalarWhereInput[]
}
export type MoodScalarWhereInputInputObject =
  | Extract<keyof MoodScalarWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'type', alias?: string  } 
  | { name: 'type_not', alias?: string  } 
  | { name: 'type_in', alias?: string  } 
  | { name: 'type_not_in', alias?: string  } 
  | { name: 'date', alias?: string  } 
  | { name: 'date_not', alias?: string  } 
  | { name: 'date_in', alias?: string  } 
  | { name: 'date_not_in', alias?: string  } 
  | { name: 'date_lt', alias?: string  } 
  | { name: 'date_lte', alias?: string  } 
  | { name: 'date_gt', alias?: string  } 
  | { name: 'date_gte', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface MoodUpdateManyWithWhereNestedInput {
  where?: MoodScalarWhereInput
  data?: MoodUpdateManyDataInput
}
export type MoodUpdateManyWithWhereNestedInputInputObject =
  | Extract<keyof MoodUpdateManyWithWhereNestedInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface MoodUpdateManyDataInput {
  type?: prisma.MoodTypes | null
  date?: string | null
}
export type MoodUpdateManyDataInputInputObject =
  | Extract<keyof MoodUpdateManyDataInput, string>
  | { name: 'type', alias?: string  } 
  | { name: 'date', alias?: string  } 
  
export interface UserUpsertWithoutPostsInput {
  update?: UserUpdateWithoutPostsDataInput
  create?: UserCreateWithoutPostsInput
}
export type UserUpsertWithoutPostsInputInputObject =
  | Extract<keyof UserUpsertWithoutPostsInput, string>
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface PostUpdateManyMutationInput {
  published?: boolean | null
  title?: string | null
  content?: string | null
}
export type PostUpdateManyMutationInputInputObject =
  | Extract<keyof PostUpdateManyMutationInput, string>
  | { name: 'published', alias?: string  } 
  | { name: 'title', alias?: string  } 
  | { name: 'content', alias?: string  } 
  
export interface UserCreateInput {
  email?: string
  password?: string
  name?: string
  posts?: PostCreateManyWithoutAuthorInput | null
  pushToken?: string | null
  habits?: HabitCreateManyWithoutOwnerInput | null
  moods?: MoodCreateManyWithoutOwnerInput | null
  isPro?: boolean | null
}
export type UserCreateInputInputObject =
  | Extract<keyof UserCreateInput, string>
  | { name: 'email', alias?: string  } 
  | { name: 'password', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'posts', alias?: string  } 
  | { name: 'pushToken', alias?: string  } 
  | { name: 'habits', alias?: string  } 
  | { name: 'moods', alias?: string  } 
  | { name: 'isPro', alias?: string  } 
  
export interface PostCreateManyWithoutAuthorInput {
  create?: PostCreateWithoutAuthorInput[]
  connect?: PostWhereUniqueInput[]
}
export type PostCreateManyWithoutAuthorInputInputObject =
  | Extract<keyof PostCreateManyWithoutAuthorInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface PostCreateWithoutAuthorInput {
  published?: boolean | null
  title?: string
  content?: string
}
export type PostCreateWithoutAuthorInputInputObject =
  | Extract<keyof PostCreateWithoutAuthorInput, string>
  | { name: 'published', alias?: string  } 
  | { name: 'title', alias?: string  } 
  | { name: 'content', alias?: string  } 
  
export interface UserUpdateInput {
  email?: string | null
  password?: string | null
  name?: string | null
  posts?: PostUpdateManyWithoutAuthorInput | null
  pushToken?: string | null
  habits?: HabitUpdateManyWithoutOwnerInput | null
  moods?: MoodUpdateManyWithoutOwnerInput | null
  isPro?: boolean | null
}
export type UserUpdateInputInputObject =
  | Extract<keyof UserUpdateInput, string>
  | { name: 'email', alias?: string  } 
  | { name: 'password', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'posts', alias?: string  } 
  | { name: 'pushToken', alias?: string  } 
  | { name: 'habits', alias?: string  } 
  | { name: 'moods', alias?: string  } 
  | { name: 'isPro', alias?: string  } 
  
export interface PostUpdateManyWithoutAuthorInput {
  create?: PostCreateWithoutAuthorInput[]
  delete?: PostWhereUniqueInput[]
  connect?: PostWhereUniqueInput[]
  set?: PostWhereUniqueInput[]
  disconnect?: PostWhereUniqueInput[]
  update?: PostUpdateWithWhereUniqueWithoutAuthorInput[]
  upsert?: PostUpsertWithWhereUniqueWithoutAuthorInput[]
  deleteMany?: PostScalarWhereInput[]
  updateMany?: PostUpdateManyWithWhereNestedInput[]
}
export type PostUpdateManyWithoutAuthorInputInputObject =
  | Extract<keyof PostUpdateManyWithoutAuthorInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  | { name: 'set', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'deleteMany', alias?: string  } 
  | { name: 'updateMany', alias?: string  } 
  
export interface PostUpdateWithWhereUniqueWithoutAuthorInput {
  where?: PostWhereUniqueInput
  data?: PostUpdateWithoutAuthorDataInput
}
export type PostUpdateWithWhereUniqueWithoutAuthorInputInputObject =
  | Extract<keyof PostUpdateWithWhereUniqueWithoutAuthorInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface PostUpdateWithoutAuthorDataInput {
  published?: boolean | null
  title?: string | null
  content?: string | null
}
export type PostUpdateWithoutAuthorDataInputInputObject =
  | Extract<keyof PostUpdateWithoutAuthorDataInput, string>
  | { name: 'published', alias?: string  } 
  | { name: 'title', alias?: string  } 
  | { name: 'content', alias?: string  } 
  
export interface PostUpsertWithWhereUniqueWithoutAuthorInput {
  where?: PostWhereUniqueInput
  update?: PostUpdateWithoutAuthorDataInput
  create?: PostCreateWithoutAuthorInput
}
export type PostUpsertWithWhereUniqueWithoutAuthorInputInputObject =
  | Extract<keyof PostUpsertWithWhereUniqueWithoutAuthorInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface PostScalarWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  createdAt?: string | null
  createdAt_not?: string | null
  createdAt_in?: string[]
  createdAt_not_in?: string[]
  createdAt_lt?: string | null
  createdAt_lte?: string | null
  createdAt_gt?: string | null
  createdAt_gte?: string | null
  updatedAt?: string | null
  updatedAt_not?: string | null
  updatedAt_in?: string[]
  updatedAt_not_in?: string[]
  updatedAt_lt?: string | null
  updatedAt_lte?: string | null
  updatedAt_gt?: string | null
  updatedAt_gte?: string | null
  published?: boolean | null
  published_not?: boolean | null
  title?: string | null
  title_not?: string | null
  title_in?: string[]
  title_not_in?: string[]
  title_lt?: string | null
  title_lte?: string | null
  title_gt?: string | null
  title_gte?: string | null
  title_contains?: string | null
  title_not_contains?: string | null
  title_starts_with?: string | null
  title_not_starts_with?: string | null
  title_ends_with?: string | null
  title_not_ends_with?: string | null
  content?: string | null
  content_not?: string | null
  content_in?: string[]
  content_not_in?: string[]
  content_lt?: string | null
  content_lte?: string | null
  content_gt?: string | null
  content_gte?: string | null
  content_contains?: string | null
  content_not_contains?: string | null
  content_starts_with?: string | null
  content_not_starts_with?: string | null
  content_ends_with?: string | null
  content_not_ends_with?: string | null
  AND?: PostScalarWhereInput[]
  OR?: PostScalarWhereInput[]
  NOT?: PostScalarWhereInput[]
}
export type PostScalarWhereInputInputObject =
  | Extract<keyof PostScalarWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'createdAt', alias?: string  } 
  | { name: 'createdAt_not', alias?: string  } 
  | { name: 'createdAt_in', alias?: string  } 
  | { name: 'createdAt_not_in', alias?: string  } 
  | { name: 'createdAt_lt', alias?: string  } 
  | { name: 'createdAt_lte', alias?: string  } 
  | { name: 'createdAt_gt', alias?: string  } 
  | { name: 'createdAt_gte', alias?: string  } 
  | { name: 'updatedAt', alias?: string  } 
  | { name: 'updatedAt_not', alias?: string  } 
  | { name: 'updatedAt_in', alias?: string  } 
  | { name: 'updatedAt_not_in', alias?: string  } 
  | { name: 'updatedAt_lt', alias?: string  } 
  | { name: 'updatedAt_lte', alias?: string  } 
  | { name: 'updatedAt_gt', alias?: string  } 
  | { name: 'updatedAt_gte', alias?: string  } 
  | { name: 'published', alias?: string  } 
  | { name: 'published_not', alias?: string  } 
  | { name: 'title', alias?: string  } 
  | { name: 'title_not', alias?: string  } 
  | { name: 'title_in', alias?: string  } 
  | { name: 'title_not_in', alias?: string  } 
  | { name: 'title_lt', alias?: string  } 
  | { name: 'title_lte', alias?: string  } 
  | { name: 'title_gt', alias?: string  } 
  | { name: 'title_gte', alias?: string  } 
  | { name: 'title_contains', alias?: string  } 
  | { name: 'title_not_contains', alias?: string  } 
  | { name: 'title_starts_with', alias?: string  } 
  | { name: 'title_not_starts_with', alias?: string  } 
  | { name: 'title_ends_with', alias?: string  } 
  | { name: 'title_not_ends_with', alias?: string  } 
  | { name: 'content', alias?: string  } 
  | { name: 'content_not', alias?: string  } 
  | { name: 'content_in', alias?: string  } 
  | { name: 'content_not_in', alias?: string  } 
  | { name: 'content_lt', alias?: string  } 
  | { name: 'content_lte', alias?: string  } 
  | { name: 'content_gt', alias?: string  } 
  | { name: 'content_gte', alias?: string  } 
  | { name: 'content_contains', alias?: string  } 
  | { name: 'content_not_contains', alias?: string  } 
  | { name: 'content_starts_with', alias?: string  } 
  | { name: 'content_not_starts_with', alias?: string  } 
  | { name: 'content_ends_with', alias?: string  } 
  | { name: 'content_not_ends_with', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface PostUpdateManyWithWhereNestedInput {
  where?: PostScalarWhereInput
  data?: PostUpdateManyDataInput
}
export type PostUpdateManyWithWhereNestedInputInputObject =
  | Extract<keyof PostUpdateManyWithWhereNestedInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface PostUpdateManyDataInput {
  published?: boolean | null
  title?: string | null
  content?: string | null
}
export type PostUpdateManyDataInputInputObject =
  | Extract<keyof PostUpdateManyDataInput, string>
  | { name: 'published', alias?: string  } 
  | { name: 'title', alias?: string  } 
  | { name: 'content', alias?: string  } 
  
export interface UserUpdateManyMutationInput {
  email?: string | null
  password?: string | null
  name?: string | null
  pushToken?: string | null
  isPro?: boolean | null
}
export type UserUpdateManyMutationInputInputObject =
  | Extract<keyof UserUpdateManyMutationInput, string>
  | { name: 'email', alias?: string  } 
  | { name: 'password', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'pushToken', alias?: string  } 
  | { name: 'isPro', alias?: string  } 
  
export interface HabitCreateInput {
  title?: string
  description?: string | null
  starred?: boolean | null
  owner?: UserCreateOneWithoutHabitsInput
  habits?: DayHabitCreateManyWithoutHabitInput | null
}
export type HabitCreateInputInputObject =
  | Extract<keyof HabitCreateInput, string>
  | { name: 'title', alias?: string  } 
  | { name: 'description', alias?: string  } 
  | { name: 'starred', alias?: string  } 
  | { name: 'owner', alias?: string  } 
  | { name: 'habits', alias?: string  } 
  
export interface UserCreateOneWithoutHabitsInput {
  create?: UserCreateWithoutHabitsInput | null
  connect?: UserWhereUniqueInput | null
}
export type UserCreateOneWithoutHabitsInputInputObject =
  | Extract<keyof UserCreateOneWithoutHabitsInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface UserCreateWithoutHabitsInput {
  email?: string
  password?: string
  name?: string
  posts?: PostCreateManyWithoutAuthorInput | null
  pushToken?: string | null
  moods?: MoodCreateManyWithoutOwnerInput | null
  isPro?: boolean | null
}
export type UserCreateWithoutHabitsInputInputObject =
  | Extract<keyof UserCreateWithoutHabitsInput, string>
  | { name: 'email', alias?: string  } 
  | { name: 'password', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'posts', alias?: string  } 
  | { name: 'pushToken', alias?: string  } 
  | { name: 'moods', alias?: string  } 
  | { name: 'isPro', alias?: string  } 
  
export interface HabitUpdateInput {
  title?: string | null
  description?: string | null
  starred?: boolean | null
  owner?: UserUpdateOneRequiredWithoutHabitsInput | null
  habits?: DayHabitUpdateManyWithoutHabitInput | null
}
export type HabitUpdateInputInputObject =
  | Extract<keyof HabitUpdateInput, string>
  | { name: 'title', alias?: string  } 
  | { name: 'description', alias?: string  } 
  | { name: 'starred', alias?: string  } 
  | { name: 'owner', alias?: string  } 
  | { name: 'habits', alias?: string  } 
  
export interface UserUpdateOneRequiredWithoutHabitsInput {
  create?: UserCreateWithoutHabitsInput | null
  update?: UserUpdateWithoutHabitsDataInput | null
  upsert?: UserUpsertWithoutHabitsInput | null
  connect?: UserWhereUniqueInput | null
}
export type UserUpdateOneRequiredWithoutHabitsInputInputObject =
  | Extract<keyof UserUpdateOneRequiredWithoutHabitsInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface UserUpdateWithoutHabitsDataInput {
  email?: string | null
  password?: string | null
  name?: string | null
  posts?: PostUpdateManyWithoutAuthorInput | null
  pushToken?: string | null
  moods?: MoodUpdateManyWithoutOwnerInput | null
  isPro?: boolean | null
}
export type UserUpdateWithoutHabitsDataInputInputObject =
  | Extract<keyof UserUpdateWithoutHabitsDataInput, string>
  | { name: 'email', alias?: string  } 
  | { name: 'password', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'posts', alias?: string  } 
  | { name: 'pushToken', alias?: string  } 
  | { name: 'moods', alias?: string  } 
  | { name: 'isPro', alias?: string  } 
  
export interface UserUpsertWithoutHabitsInput {
  update?: UserUpdateWithoutHabitsDataInput
  create?: UserCreateWithoutHabitsInput
}
export type UserUpsertWithoutHabitsInputInputObject =
  | Extract<keyof UserUpsertWithoutHabitsInput, string>
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface HabitUpdateManyMutationInput {
  title?: string | null
  description?: string | null
  starred?: boolean | null
}
export type HabitUpdateManyMutationInputInputObject =
  | Extract<keyof HabitUpdateManyMutationInput, string>
  | { name: 'title', alias?: string  } 
  | { name: 'description', alias?: string  } 
  | { name: 'starred', alias?: string  } 
  
export interface DayHabitCreateInput {
  done?: boolean | null
  date?: string
  habit?: HabitCreateOneWithoutHabitsInput
}
export type DayHabitCreateInputInputObject =
  | Extract<keyof DayHabitCreateInput, string>
  | { name: 'done', alias?: string  } 
  | { name: 'date', alias?: string  } 
  | { name: 'habit', alias?: string  } 
  
export interface HabitCreateOneWithoutHabitsInput {
  create?: HabitCreateWithoutHabitsInput | null
  connect?: HabitWhereUniqueInput | null
}
export type HabitCreateOneWithoutHabitsInputInputObject =
  | Extract<keyof HabitCreateOneWithoutHabitsInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface HabitCreateWithoutHabitsInput {
  title?: string
  description?: string | null
  starred?: boolean | null
  owner?: UserCreateOneWithoutHabitsInput
}
export type HabitCreateWithoutHabitsInputInputObject =
  | Extract<keyof HabitCreateWithoutHabitsInput, string>
  | { name: 'title', alias?: string  } 
  | { name: 'description', alias?: string  } 
  | { name: 'starred', alias?: string  } 
  | { name: 'owner', alias?: string  } 
  
export interface DayHabitUpdateInput {
  done?: boolean | null
  date?: string | null
  habit?: HabitUpdateOneRequiredWithoutHabitsInput | null
}
export type DayHabitUpdateInputInputObject =
  | Extract<keyof DayHabitUpdateInput, string>
  | { name: 'done', alias?: string  } 
  | { name: 'date', alias?: string  } 
  | { name: 'habit', alias?: string  } 
  
export interface HabitUpdateOneRequiredWithoutHabitsInput {
  create?: HabitCreateWithoutHabitsInput | null
  update?: HabitUpdateWithoutHabitsDataInput | null
  upsert?: HabitUpsertWithoutHabitsInput | null
  connect?: HabitWhereUniqueInput | null
}
export type HabitUpdateOneRequiredWithoutHabitsInputInputObject =
  | Extract<keyof HabitUpdateOneRequiredWithoutHabitsInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface HabitUpdateWithoutHabitsDataInput {
  title?: string | null
  description?: string | null
  starred?: boolean | null
  owner?: UserUpdateOneRequiredWithoutHabitsInput | null
}
export type HabitUpdateWithoutHabitsDataInputInputObject =
  | Extract<keyof HabitUpdateWithoutHabitsDataInput, string>
  | { name: 'title', alias?: string  } 
  | { name: 'description', alias?: string  } 
  | { name: 'starred', alias?: string  } 
  | { name: 'owner', alias?: string  } 
  
export interface HabitUpsertWithoutHabitsInput {
  update?: HabitUpdateWithoutHabitsDataInput
  create?: HabitCreateWithoutHabitsInput
}
export type HabitUpsertWithoutHabitsInputInputObject =
  | Extract<keyof HabitUpsertWithoutHabitsInput, string>
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface DayHabitUpdateManyMutationInput {
  done?: boolean | null
  date?: string | null
}
export type DayHabitUpdateManyMutationInputInputObject =
  | Extract<keyof DayHabitUpdateManyMutationInput, string>
  | { name: 'done', alias?: string  } 
  | { name: 'date', alias?: string  } 
  
export interface MoodCreateInput {
  type?: prisma.MoodTypes
  date?: string
  owner?: UserCreateOneWithoutMoodsInput
}
export type MoodCreateInputInputObject =
  | Extract<keyof MoodCreateInput, string>
  | { name: 'type', alias?: string  } 
  | { name: 'date', alias?: string  } 
  | { name: 'owner', alias?: string  } 
  
export interface UserCreateOneWithoutMoodsInput {
  create?: UserCreateWithoutMoodsInput | null
  connect?: UserWhereUniqueInput | null
}
export type UserCreateOneWithoutMoodsInputInputObject =
  | Extract<keyof UserCreateOneWithoutMoodsInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface UserCreateWithoutMoodsInput {
  email?: string
  password?: string
  name?: string
  posts?: PostCreateManyWithoutAuthorInput | null
  pushToken?: string | null
  habits?: HabitCreateManyWithoutOwnerInput | null
  isPro?: boolean | null
}
export type UserCreateWithoutMoodsInputInputObject =
  | Extract<keyof UserCreateWithoutMoodsInput, string>
  | { name: 'email', alias?: string  } 
  | { name: 'password', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'posts', alias?: string  } 
  | { name: 'pushToken', alias?: string  } 
  | { name: 'habits', alias?: string  } 
  | { name: 'isPro', alias?: string  } 
  
export interface MoodUpdateInput {
  type?: prisma.MoodTypes | null
  date?: string | null
  owner?: UserUpdateOneRequiredWithoutMoodsInput | null
}
export type MoodUpdateInputInputObject =
  | Extract<keyof MoodUpdateInput, string>
  | { name: 'type', alias?: string  } 
  | { name: 'date', alias?: string  } 
  | { name: 'owner', alias?: string  } 
  
export interface UserUpdateOneRequiredWithoutMoodsInput {
  create?: UserCreateWithoutMoodsInput | null
  update?: UserUpdateWithoutMoodsDataInput | null
  upsert?: UserUpsertWithoutMoodsInput | null
  connect?: UserWhereUniqueInput | null
}
export type UserUpdateOneRequiredWithoutMoodsInputInputObject =
  | Extract<keyof UserUpdateOneRequiredWithoutMoodsInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface UserUpdateWithoutMoodsDataInput {
  email?: string | null
  password?: string | null
  name?: string | null
  posts?: PostUpdateManyWithoutAuthorInput | null
  pushToken?: string | null
  habits?: HabitUpdateManyWithoutOwnerInput | null
  isPro?: boolean | null
}
export type UserUpdateWithoutMoodsDataInputInputObject =
  | Extract<keyof UserUpdateWithoutMoodsDataInput, string>
  | { name: 'email', alias?: string  } 
  | { name: 'password', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'posts', alias?: string  } 
  | { name: 'pushToken', alias?: string  } 
  | { name: 'habits', alias?: string  } 
  | { name: 'isPro', alias?: string  } 
  
export interface UserUpsertWithoutMoodsInput {
  update?: UserUpdateWithoutMoodsDataInput
  create?: UserCreateWithoutMoodsInput
}
export type UserUpsertWithoutMoodsInputInputObject =
  | Extract<keyof UserUpsertWithoutMoodsInput, string>
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface MoodUpdateManyMutationInput {
  type?: prisma.MoodTypes | null
  date?: string | null
}
export type MoodUpdateManyMutationInputInputObject =
  | Extract<keyof MoodUpdateManyMutationInput, string>
  | { name: 'type', alias?: string  } 
  | { name: 'date', alias?: string  } 
  
export interface PostSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: PostWhereInput | null
  AND?: PostSubscriptionWhereInput[]
  OR?: PostSubscriptionWhereInput[]
  NOT?: PostSubscriptionWhereInput[]
}
export type PostSubscriptionWhereInputInputObject =
  | Extract<keyof PostSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface UserSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: UserWhereInput | null
  AND?: UserSubscriptionWhereInput[]
  OR?: UserSubscriptionWhereInput[]
  NOT?: UserSubscriptionWhereInput[]
}
export type UserSubscriptionWhereInputInputObject =
  | Extract<keyof UserSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface HabitSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: HabitWhereInput | null
  AND?: HabitSubscriptionWhereInput[]
  OR?: HabitSubscriptionWhereInput[]
  NOT?: HabitSubscriptionWhereInput[]
}
export type HabitSubscriptionWhereInputInputObject =
  | Extract<keyof HabitSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface DayHabitSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: DayHabitWhereInput | null
  AND?: DayHabitSubscriptionWhereInput[]
  OR?: DayHabitSubscriptionWhereInput[]
  NOT?: DayHabitSubscriptionWhereInput[]
}
export type DayHabitSubscriptionWhereInputInputObject =
  | Extract<keyof DayHabitSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface MoodSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: MoodWhereInput | null
  AND?: MoodSubscriptionWhereInput[]
  OR?: MoodSubscriptionWhereInput[]
  NOT?: MoodSubscriptionWhereInput[]
}
export type MoodSubscriptionWhereInputInputObject =
  | Extract<keyof MoodSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  

export type MoodTypesValues =
  | 'Dizzy'
  | 'Frown'
  | 'FrownOpen'
  | 'Meh'
  | 'Smile'
  | 'Laugh'
  | 'GrinHearts'
  
export type PostOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  | 'published_ASC'
  | 'published_DESC'
  | 'title_ASC'
  | 'title_DESC'
  | 'content_ASC'
  | 'content_DESC'
  
export type HabitOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'title_ASC'
  | 'title_DESC'
  | 'description_ASC'
  | 'description_DESC'
  | 'starred_ASC'
  | 'starred_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  
export type DayHabitOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'done_ASC'
  | 'done_DESC'
  | 'date_ASC'
  | 'date_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  
export type MoodOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'type_ASC'
  | 'type_DESC'
  | 'date_ASC'
  | 'date_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  
export type UserOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'email_ASC'
  | 'email_DESC'
  | 'password_ASC'
  | 'password_DESC'
  | 'name_ASC'
  | 'name_DESC'
  | 'pushToken_ASC'
  | 'pushToken_DESC'
  | 'isPro_ASC'
  | 'isPro_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  
export type MutationTypeValues =
  | 'CREATED'
  | 'UPDATED'
  | 'DELETED'
  
  
// Code generated by Prisma (prisma@1.30.4). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export interface Exists {
  dayHabit: (where?: DayHabitWhereInput) => Promise<boolean>;
  habit: (where?: HabitWhereInput) => Promise<boolean>;
  mood: (where?: MoodWhereInput) => Promise<boolean>;
  post: (where?: PostWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  dayHabit: (where: DayHabitWhereUniqueInput) => DayHabitPromise;
  dayHabits: (
    args?: {
      where?: DayHabitWhereInput;
      orderBy?: DayHabitOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<DayHabit>;
  dayHabitsConnection: (
    args?: {
      where?: DayHabitWhereInput;
      orderBy?: DayHabitOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => DayHabitConnectionPromise;
  habit: (where: HabitWhereUniqueInput) => HabitPromise;
  habits: (
    args?: {
      where?: HabitWhereInput;
      orderBy?: HabitOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Habit>;
  habitsConnection: (
    args?: {
      where?: HabitWhereInput;
      orderBy?: HabitOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => HabitConnectionPromise;
  mood: (where: MoodWhereUniqueInput) => MoodPromise;
  moods: (
    args?: {
      where?: MoodWhereInput;
      orderBy?: MoodOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Mood>;
  moodsConnection: (
    args?: {
      where?: MoodWhereInput;
      orderBy?: MoodOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => MoodConnectionPromise;
  post: (where: PostWhereUniqueInput) => PostPromise;
  posts: (
    args?: {
      where?: PostWhereInput;
      orderBy?: PostOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Post>;
  postsConnection: (
    args?: {
      where?: PostWhereInput;
      orderBy?: PostOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => PostConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserPromise;
  users: (
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<User>;
  usersConnection: (
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => UserConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createDayHabit: (data: DayHabitCreateInput) => DayHabitPromise;
  updateDayHabit: (
    args: { data: DayHabitUpdateInput; where: DayHabitWhereUniqueInput }
  ) => DayHabitPromise;
  updateManyDayHabits: (
    args: { data: DayHabitUpdateManyMutationInput; where?: DayHabitWhereInput }
  ) => BatchPayloadPromise;
  upsertDayHabit: (
    args: {
      where: DayHabitWhereUniqueInput;
      create: DayHabitCreateInput;
      update: DayHabitUpdateInput;
    }
  ) => DayHabitPromise;
  deleteDayHabit: (where: DayHabitWhereUniqueInput) => DayHabitPromise;
  deleteManyDayHabits: (where?: DayHabitWhereInput) => BatchPayloadPromise;
  createHabit: (data: HabitCreateInput) => HabitPromise;
  updateHabit: (
    args: { data: HabitUpdateInput; where: HabitWhereUniqueInput }
  ) => HabitPromise;
  updateManyHabits: (
    args: { data: HabitUpdateManyMutationInput; where?: HabitWhereInput }
  ) => BatchPayloadPromise;
  upsertHabit: (
    args: {
      where: HabitWhereUniqueInput;
      create: HabitCreateInput;
      update: HabitUpdateInput;
    }
  ) => HabitPromise;
  deleteHabit: (where: HabitWhereUniqueInput) => HabitPromise;
  deleteManyHabits: (where?: HabitWhereInput) => BatchPayloadPromise;
  createMood: (data: MoodCreateInput) => MoodPromise;
  updateMood: (
    args: { data: MoodUpdateInput; where: MoodWhereUniqueInput }
  ) => MoodPromise;
  updateManyMoods: (
    args: { data: MoodUpdateManyMutationInput; where?: MoodWhereInput }
  ) => BatchPayloadPromise;
  upsertMood: (
    args: {
      where: MoodWhereUniqueInput;
      create: MoodCreateInput;
      update: MoodUpdateInput;
    }
  ) => MoodPromise;
  deleteMood: (where: MoodWhereUniqueInput) => MoodPromise;
  deleteManyMoods: (where?: MoodWhereInput) => BatchPayloadPromise;
  createPost: (data: PostCreateInput) => PostPromise;
  updatePost: (
    args: { data: PostUpdateInput; where: PostWhereUniqueInput }
  ) => PostPromise;
  updateManyPosts: (
    args: { data: PostUpdateManyMutationInput; where?: PostWhereInput }
  ) => BatchPayloadPromise;
  upsertPost: (
    args: {
      where: PostWhereUniqueInput;
      create: PostCreateInput;
      update: PostUpdateInput;
    }
  ) => PostPromise;
  deletePost: (where: PostWhereUniqueInput) => PostPromise;
  deleteManyPosts: (where?: PostWhereInput) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (
    args: { data: UserUpdateInput; where: UserWhereUniqueInput }
  ) => UserPromise;
  updateManyUsers: (
    args: { data: UserUpdateManyMutationInput; where?: UserWhereInput }
  ) => BatchPayloadPromise;
  upsertUser: (
    args: {
      where: UserWhereUniqueInput;
      create: UserCreateInput;
      update: UserUpdateInput;
    }
  ) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  dayHabit: (
    where?: DayHabitSubscriptionWhereInput
  ) => DayHabitSubscriptionPayloadSubscription;
  habit: (
    where?: HabitSubscriptionWhereInput
  ) => HabitSubscriptionPayloadSubscription;
  mood: (
    where?: MoodSubscriptionWhereInput
  ) => MoodSubscriptionPayloadSubscription;
  post: (
    where?: PostSubscriptionWhereInput
  ) => PostSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type MoodTypes =
  | "Dizzy"
  | "Frown"
  | "FrownOpen"
  | "Meh"
  | "Smile"
  | "Laugh"
  | "GrinHearts";

export type PostOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "published_ASC"
  | "published_DESC"
  | "title_ASC"
  | "title_DESC"
  | "content_ASC"
  | "content_DESC";

export type HabitOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "title_ASC"
  | "title_DESC"
  | "description_ASC"
  | "description_DESC"
  | "starred_ASC"
  | "starred_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type MoodOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "type_ASC"
  | "type_DESC"
  | "date_ASC"
  | "date_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type DayHabitOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "done_ASC"
  | "done_DESC"
  | "date_ASC"
  | "date_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "email_ASC"
  | "email_DESC"
  | "password_ASC"
  | "password_DESC"
  | "name_ASC"
  | "name_DESC"
  | "pushToken_ASC"
  | "pushToken_DESC"
  | "isPro_ASC"
  | "isPro_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export interface MoodUpdateWithoutOwnerDataInput {
  type?: MoodTypes;
  date?: DateTimeInput;
}

export type DayHabitWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface MoodUpdateManyDataInput {
  type?: MoodTypes;
  date?: DateTimeInput;
}

export interface UserWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  email?: String;
  email_not?: String;
  email_in?: String[] | String;
  email_not_in?: String[] | String;
  email_lt?: String;
  email_lte?: String;
  email_gt?: String;
  email_gte?: String;
  email_contains?: String;
  email_not_contains?: String;
  email_starts_with?: String;
  email_not_starts_with?: String;
  email_ends_with?: String;
  email_not_ends_with?: String;
  password?: String;
  password_not?: String;
  password_in?: String[] | String;
  password_not_in?: String[] | String;
  password_lt?: String;
  password_lte?: String;
  password_gt?: String;
  password_gte?: String;
  password_contains?: String;
  password_not_contains?: String;
  password_starts_with?: String;
  password_not_starts_with?: String;
  password_ends_with?: String;
  password_not_ends_with?: String;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  posts_every?: PostWhereInput;
  posts_some?: PostWhereInput;
  posts_none?: PostWhereInput;
  pushToken?: String;
  pushToken_not?: String;
  pushToken_in?: String[] | String;
  pushToken_not_in?: String[] | String;
  pushToken_lt?: String;
  pushToken_lte?: String;
  pushToken_gt?: String;
  pushToken_gte?: String;
  pushToken_contains?: String;
  pushToken_not_contains?: String;
  pushToken_starts_with?: String;
  pushToken_not_starts_with?: String;
  pushToken_ends_with?: String;
  pushToken_not_ends_with?: String;
  habits_every?: HabitWhereInput;
  habits_some?: HabitWhereInput;
  habits_none?: HabitWhereInput;
  moods_every?: MoodWhereInput;
  moods_some?: MoodWhereInput;
  moods_none?: MoodWhereInput;
  isPro?: Boolean;
  isPro_not?: Boolean;
  AND?: UserWhereInput[] | UserWhereInput;
  OR?: UserWhereInput[] | UserWhereInput;
  NOT?: UserWhereInput[] | UserWhereInput;
}

export interface UserUpsertWithoutHabitsInput {
  update: UserUpdateWithoutHabitsDataInput;
  create: UserCreateWithoutHabitsInput;
}

export interface DayHabitWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  done?: Boolean;
  done_not?: Boolean;
  date?: DateTimeInput;
  date_not?: DateTimeInput;
  date_in?: DateTimeInput[] | DateTimeInput;
  date_not_in?: DateTimeInput[] | DateTimeInput;
  date_lt?: DateTimeInput;
  date_lte?: DateTimeInput;
  date_gt?: DateTimeInput;
  date_gte?: DateTimeInput;
  habit?: HabitWhereInput;
  AND?: DayHabitWhereInput[] | DayHabitWhereInput;
  OR?: DayHabitWhereInput[] | DayHabitWhereInput;
  NOT?: DayHabitWhereInput[] | DayHabitWhereInput;
}

export interface HabitUpsertWithoutHabitsInput {
  update: HabitUpdateWithoutHabitsDataInput;
  create: HabitCreateWithoutHabitsInput;
}

export interface PostWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  published?: Boolean;
  published_not?: Boolean;
  title?: String;
  title_not?: String;
  title_in?: String[] | String;
  title_not_in?: String[] | String;
  title_lt?: String;
  title_lte?: String;
  title_gt?: String;
  title_gte?: String;
  title_contains?: String;
  title_not_contains?: String;
  title_starts_with?: String;
  title_not_starts_with?: String;
  title_ends_with?: String;
  title_not_ends_with?: String;
  content?: String;
  content_not?: String;
  content_in?: String[] | String;
  content_not_in?: String[] | String;
  content_lt?: String;
  content_lte?: String;
  content_gt?: String;
  content_gte?: String;
  content_contains?: String;
  content_not_contains?: String;
  content_starts_with?: String;
  content_not_starts_with?: String;
  content_ends_with?: String;
  content_not_ends_with?: String;
  author?: UserWhereInput;
  AND?: PostWhereInput[] | PostWhereInput;
  OR?: PostWhereInput[] | PostWhereInput;
  NOT?: PostWhereInput[] | PostWhereInput;
}

export interface UserUpdateOneRequiredWithoutHabitsInput {
  create?: UserCreateWithoutHabitsInput;
  update?: UserUpdateWithoutHabitsDataInput;
  upsert?: UserUpsertWithoutHabitsInput;
  connect?: UserWhereUniqueInput;
}

export interface UserUpdateOneRequiredWithoutMoodsInput {
  create?: UserCreateWithoutMoodsInput;
  update?: UserUpdateWithoutMoodsDataInput;
  upsert?: UserUpsertWithoutMoodsInput;
  connect?: UserWhereUniqueInput;
}

export interface UserUpdateWithoutHabitsDataInput {
  email?: String;
  password?: String;
  name?: String;
  posts?: PostUpdateManyWithoutAuthorInput;
  pushToken?: String;
  moods?: MoodUpdateManyWithoutOwnerInput;
  isPro?: Boolean;
}

export interface DayHabitUpdateManyMutationInput {
  done?: Boolean;
  date?: DateTimeInput;
}

export interface PostUpdateManyWithoutAuthorInput {
  create?: PostCreateWithoutAuthorInput[] | PostCreateWithoutAuthorInput;
  delete?: PostWhereUniqueInput[] | PostWhereUniqueInput;
  connect?: PostWhereUniqueInput[] | PostWhereUniqueInput;
  set?: PostWhereUniqueInput[] | PostWhereUniqueInput;
  disconnect?: PostWhereUniqueInput[] | PostWhereUniqueInput;
  update?:
    | PostUpdateWithWhereUniqueWithoutAuthorInput[]
    | PostUpdateWithWhereUniqueWithoutAuthorInput;
  upsert?:
    | PostUpsertWithWhereUniqueWithoutAuthorInput[]
    | PostUpsertWithWhereUniqueWithoutAuthorInput;
  deleteMany?: PostScalarWhereInput[] | PostScalarWhereInput;
  updateMany?:
    | PostUpdateManyWithWhereNestedInput[]
    | PostUpdateManyWithWhereNestedInput;
}

export interface PostSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: PostWhereInput;
  AND?: PostSubscriptionWhereInput[] | PostSubscriptionWhereInput;
  OR?: PostSubscriptionWhereInput[] | PostSubscriptionWhereInput;
  NOT?: PostSubscriptionWhereInput[] | PostSubscriptionWhereInput;
}

export interface PostUpdateWithWhereUniqueWithoutAuthorInput {
  where: PostWhereUniqueInput;
  data: PostUpdateWithoutAuthorDataInput;
}

export interface HabitSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: HabitWhereInput;
  AND?: HabitSubscriptionWhereInput[] | HabitSubscriptionWhereInput;
  OR?: HabitSubscriptionWhereInput[] | HabitSubscriptionWhereInput;
  NOT?: HabitSubscriptionWhereInput[] | HabitSubscriptionWhereInput;
}

export interface PostUpdateWithoutAuthorDataInput {
  published?: Boolean;
  title?: String;
  content?: String;
}

export interface UserUpdateManyMutationInput {
  email?: String;
  password?: String;
  name?: String;
  pushToken?: String;
  isPro?: Boolean;
}

export interface PostUpsertWithWhereUniqueWithoutAuthorInput {
  where: PostWhereUniqueInput;
  update: PostUpdateWithoutAuthorDataInput;
  create: PostCreateWithoutAuthorInput;
}

export interface UserCreateInput {
  email: String;
  password: String;
  name: String;
  posts?: PostCreateManyWithoutAuthorInput;
  pushToken?: String;
  habits?: HabitCreateManyWithoutOwnerInput;
  moods?: MoodCreateManyWithoutOwnerInput;
  isPro?: Boolean;
}

export interface PostScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  published?: Boolean;
  published_not?: Boolean;
  title?: String;
  title_not?: String;
  title_in?: String[] | String;
  title_not_in?: String[] | String;
  title_lt?: String;
  title_lte?: String;
  title_gt?: String;
  title_gte?: String;
  title_contains?: String;
  title_not_contains?: String;
  title_starts_with?: String;
  title_not_starts_with?: String;
  title_ends_with?: String;
  title_not_ends_with?: String;
  content?: String;
  content_not?: String;
  content_in?: String[] | String;
  content_not_in?: String[] | String;
  content_lt?: String;
  content_lte?: String;
  content_gt?: String;
  content_gte?: String;
  content_contains?: String;
  content_not_contains?: String;
  content_starts_with?: String;
  content_not_starts_with?: String;
  content_ends_with?: String;
  content_not_ends_with?: String;
  AND?: PostScalarWhereInput[] | PostScalarWhereInput;
  OR?: PostScalarWhereInput[] | PostScalarWhereInput;
  NOT?: PostScalarWhereInput[] | PostScalarWhereInput;
}

export interface PostUpdateManyMutationInput {
  published?: Boolean;
  title?: String;
  content?: String;
}

export interface PostUpdateManyWithWhereNestedInput {
  where: PostScalarWhereInput;
  data: PostUpdateManyDataInput;
}

export interface UserUpdateWithoutPostsDataInput {
  email?: String;
  password?: String;
  name?: String;
  pushToken?: String;
  habits?: HabitUpdateManyWithoutOwnerInput;
  moods?: MoodUpdateManyWithoutOwnerInput;
  isPro?: Boolean;
}

export interface PostUpdateManyDataInput {
  published?: Boolean;
  title?: String;
  content?: String;
}

export interface UserUpdateOneRequiredWithoutPostsInput {
  create?: UserCreateWithoutPostsInput;
  update?: UserUpdateWithoutPostsDataInput;
  upsert?: UserUpsertWithoutPostsInput;
  connect?: UserWhereUniqueInput;
}

export interface MoodUpdateManyWithoutOwnerInput {
  create?: MoodCreateWithoutOwnerInput[] | MoodCreateWithoutOwnerInput;
  delete?: MoodWhereUniqueInput[] | MoodWhereUniqueInput;
  connect?: MoodWhereUniqueInput[] | MoodWhereUniqueInput;
  set?: MoodWhereUniqueInput[] | MoodWhereUniqueInput;
  disconnect?: MoodWhereUniqueInput[] | MoodWhereUniqueInput;
  update?:
    | MoodUpdateWithWhereUniqueWithoutOwnerInput[]
    | MoodUpdateWithWhereUniqueWithoutOwnerInput;
  upsert?:
    | MoodUpsertWithWhereUniqueWithoutOwnerInput[]
    | MoodUpsertWithWhereUniqueWithoutOwnerInput;
  deleteMany?: MoodScalarWhereInput[] | MoodScalarWhereInput;
  updateMany?:
    | MoodUpdateManyWithWhereNestedInput[]
    | MoodUpdateManyWithWhereNestedInput;
}

export interface UserCreateWithoutPostsInput {
  email: String;
  password: String;
  name: String;
  pushToken?: String;
  habits?: HabitCreateManyWithoutOwnerInput;
  moods?: MoodCreateManyWithoutOwnerInput;
  isPro?: Boolean;
}

export interface MoodUpdateWithWhereUniqueWithoutOwnerInput {
  where: MoodWhereUniqueInput;
  data: MoodUpdateWithoutOwnerDataInput;
}

export interface UserCreateOneWithoutPostsInput {
  create?: UserCreateWithoutPostsInput;
  connect?: UserWhereUniqueInput;
}

export interface HabitUpsertWithWhereUniqueWithoutOwnerInput {
  where: HabitWhereUniqueInput;
  update: HabitUpdateWithoutOwnerDataInput;
  create: HabitCreateWithoutOwnerInput;
}

export interface MoodUpdateManyMutationInput {
  type?: MoodTypes;
  date?: DateTimeInput;
}

export interface MoodUpsertWithWhereUniqueWithoutOwnerInput {
  where: MoodWhereUniqueInput;
  update: MoodUpdateWithoutOwnerDataInput;
  create: MoodCreateWithoutOwnerInput;
}

export interface UserUpsertWithoutMoodsInput {
  update: UserUpdateWithoutMoodsDataInput;
  create: UserCreateWithoutMoodsInput;
}

export interface MoodScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  type?: MoodTypes;
  type_not?: MoodTypes;
  type_in?: MoodTypes[] | MoodTypes;
  type_not_in?: MoodTypes[] | MoodTypes;
  date?: DateTimeInput;
  date_not?: DateTimeInput;
  date_in?: DateTimeInput[] | DateTimeInput;
  date_not_in?: DateTimeInput[] | DateTimeInput;
  date_lt?: DateTimeInput;
  date_lte?: DateTimeInput;
  date_gt?: DateTimeInput;
  date_gte?: DateTimeInput;
  AND?: MoodScalarWhereInput[] | MoodScalarWhereInput;
  OR?: MoodScalarWhereInput[] | MoodScalarWhereInput;
  NOT?: MoodScalarWhereInput[] | MoodScalarWhereInput;
}

export interface HabitUpdateManyWithWhereNestedInput {
  where: HabitScalarWhereInput;
  data: HabitUpdateManyDataInput;
}

export interface MoodUpdateManyWithWhereNestedInput {
  where: MoodScalarWhereInput;
  data: MoodUpdateManyDataInput;
}

export interface HabitCreateOneWithoutHabitsInput {
  create?: HabitCreateWithoutHabitsInput;
  connect?: HabitWhereUniqueInput;
}

export interface HabitWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  title?: String;
  title_not?: String;
  title_in?: String[] | String;
  title_not_in?: String[] | String;
  title_lt?: String;
  title_lte?: String;
  title_gt?: String;
  title_gte?: String;
  title_contains?: String;
  title_not_contains?: String;
  title_starts_with?: String;
  title_not_starts_with?: String;
  title_ends_with?: String;
  title_not_ends_with?: String;
  description?: String;
  description_not?: String;
  description_in?: String[] | String;
  description_not_in?: String[] | String;
  description_lt?: String;
  description_lte?: String;
  description_gt?: String;
  description_gte?: String;
  description_contains?: String;
  description_not_contains?: String;
  description_starts_with?: String;
  description_not_starts_with?: String;
  description_ends_with?: String;
  description_not_ends_with?: String;
  starred?: Boolean;
  starred_not?: Boolean;
  owner?: UserWhereInput;
  habits_every?: DayHabitWhereInput;
  habits_some?: DayHabitWhereInput;
  habits_none?: DayHabitWhereInput;
  AND?: HabitWhereInput[] | HabitWhereInput;
  OR?: HabitWhereInput[] | HabitWhereInput;
  NOT?: HabitWhereInput[] | HabitWhereInput;
}

export interface UserCreateOneWithoutHabitsInput {
  create?: UserCreateWithoutHabitsInput;
  connect?: UserWhereUniqueInput;
}

export interface MoodWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  type?: MoodTypes;
  type_not?: MoodTypes;
  type_in?: MoodTypes[] | MoodTypes;
  type_not_in?: MoodTypes[] | MoodTypes;
  date?: DateTimeInput;
  date_not?: DateTimeInput;
  date_in?: DateTimeInput[] | DateTimeInput;
  date_not_in?: DateTimeInput[] | DateTimeInput;
  date_lt?: DateTimeInput;
  date_lte?: DateTimeInput;
  date_gt?: DateTimeInput;
  date_gte?: DateTimeInput;
  owner?: UserWhereInput;
  AND?: MoodWhereInput[] | MoodWhereInput;
  OR?: MoodWhereInput[] | MoodWhereInput;
  NOT?: MoodWhereInput[] | MoodWhereInput;
}

export interface PostCreateManyWithoutAuthorInput {
  create?: PostCreateWithoutAuthorInput[] | PostCreateWithoutAuthorInput;
  connect?: PostWhereUniqueInput[] | PostWhereUniqueInput;
}

export interface HabitUpdateWithoutOwnerDataInput {
  title?: String;
  description?: String;
  starred?: Boolean;
  habits?: DayHabitUpdateManyWithoutHabitInput;
}

export interface MoodCreateManyWithoutOwnerInput {
  create?: MoodCreateWithoutOwnerInput[] | MoodCreateWithoutOwnerInput;
  connect?: MoodWhereUniqueInput[] | MoodWhereUniqueInput;
}

export interface HabitUpdateWithWhereUniqueWithoutOwnerInput {
  where: HabitWhereUniqueInput;
  data: HabitUpdateWithoutOwnerDataInput;
}

export interface DayHabitUpdateInput {
  done?: Boolean;
  date?: DateTimeInput;
  habit?: HabitUpdateOneRequiredWithoutHabitsInput;
}

export interface HabitUpdateManyWithoutOwnerInput {
  create?: HabitCreateWithoutOwnerInput[] | HabitCreateWithoutOwnerInput;
  delete?: HabitWhereUniqueInput[] | HabitWhereUniqueInput;
  connect?: HabitWhereUniqueInput[] | HabitWhereUniqueInput;
  set?: HabitWhereUniqueInput[] | HabitWhereUniqueInput;
  disconnect?: HabitWhereUniqueInput[] | HabitWhereUniqueInput;
  update?:
    | HabitUpdateWithWhereUniqueWithoutOwnerInput[]
    | HabitUpdateWithWhereUniqueWithoutOwnerInput;
  upsert?:
    | HabitUpsertWithWhereUniqueWithoutOwnerInput[]
    | HabitUpsertWithWhereUniqueWithoutOwnerInput;
  deleteMany?: HabitScalarWhereInput[] | HabitScalarWhereInput;
  updateMany?:
    | HabitUpdateManyWithWhereNestedInput[]
    | HabitUpdateManyWithWhereNestedInput;
}

export interface HabitUpdateWithoutHabitsDataInput {
  title?: String;
  description?: String;
  starred?: Boolean;
  owner?: UserUpdateOneRequiredWithoutHabitsInput;
}

export interface UserUpdateWithoutMoodsDataInput {
  email?: String;
  password?: String;
  name?: String;
  posts?: PostUpdateManyWithoutAuthorInput;
  pushToken?: String;
  habits?: HabitUpdateManyWithoutOwnerInput;
  isPro?: Boolean;
}

export interface MoodSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: MoodWhereInput;
  AND?: MoodSubscriptionWhereInput[] | MoodSubscriptionWhereInput;
  OR?: MoodSubscriptionWhereInput[] | MoodSubscriptionWhereInput;
  NOT?: MoodSubscriptionWhereInput[] | MoodSubscriptionWhereInput;
}

export interface HabitCreateInput {
  title: String;
  description?: String;
  starred?: Boolean;
  owner: UserCreateOneWithoutHabitsInput;
  habits?: DayHabitCreateManyWithoutHabitInput;
}

export interface UserUpdateInput {
  email?: String;
  password?: String;
  name?: String;
  posts?: PostUpdateManyWithoutAuthorInput;
  pushToken?: String;
  habits?: HabitUpdateManyWithoutOwnerInput;
  moods?: MoodUpdateManyWithoutOwnerInput;
  isPro?: Boolean;
}

export interface DayHabitCreateManyWithoutHabitInput {
  create?: DayHabitCreateWithoutHabitInput[] | DayHabitCreateWithoutHabitInput;
  connect?: DayHabitWhereUniqueInput[] | DayHabitWhereUniqueInput;
}

export interface UserUpsertWithoutPostsInput {
  update: UserUpdateWithoutPostsDataInput;
  create: UserCreateWithoutPostsInput;
}

export interface DayHabitCreateWithoutHabitInput {
  done?: Boolean;
  date: DateTimeInput;
}

export interface PostUpdateInput {
  published?: Boolean;
  title?: String;
  content?: String;
  author?: UserUpdateOneRequiredWithoutPostsInput;
}

export interface HabitUpdateInput {
  title?: String;
  description?: String;
  starred?: Boolean;
  owner?: UserUpdateOneRequiredWithoutHabitsInput;
  habits?: DayHabitUpdateManyWithoutHabitInput;
}

export interface PostCreateInput {
  published?: Boolean;
  title: String;
  content: String;
  author: UserCreateOneWithoutPostsInput;
}

export interface DayHabitUpdateManyWithoutHabitInput {
  create?: DayHabitCreateWithoutHabitInput[] | DayHabitCreateWithoutHabitInput;
  delete?: DayHabitWhereUniqueInput[] | DayHabitWhereUniqueInput;
  connect?: DayHabitWhereUniqueInput[] | DayHabitWhereUniqueInput;
  set?: DayHabitWhereUniqueInput[] | DayHabitWhereUniqueInput;
  disconnect?: DayHabitWhereUniqueInput[] | DayHabitWhereUniqueInput;
  update?:
    | DayHabitUpdateWithWhereUniqueWithoutHabitInput[]
    | DayHabitUpdateWithWhereUniqueWithoutHabitInput;
  upsert?:
    | DayHabitUpsertWithWhereUniqueWithoutHabitInput[]
    | DayHabitUpsertWithWhereUniqueWithoutHabitInput;
  deleteMany?: DayHabitScalarWhereInput[] | DayHabitScalarWhereInput;
  updateMany?:
    | DayHabitUpdateManyWithWhereNestedInput[]
    | DayHabitUpdateManyWithWhereNestedInput;
}

export interface HabitUpdateManyDataInput {
  title?: String;
  description?: String;
  starred?: Boolean;
}

export interface DayHabitUpdateWithWhereUniqueWithoutHabitInput {
  where: DayHabitWhereUniqueInput;
  data: DayHabitUpdateWithoutHabitDataInput;
}

export interface DayHabitCreateInput {
  done?: Boolean;
  date: DateTimeInput;
  habit: HabitCreateOneWithoutHabitsInput;
}

export interface DayHabitUpdateWithoutHabitDataInput {
  done?: Boolean;
  date?: DateTimeInput;
}

export interface UserCreateWithoutHabitsInput {
  email: String;
  password: String;
  name: String;
  posts?: PostCreateManyWithoutAuthorInput;
  pushToken?: String;
  moods?: MoodCreateManyWithoutOwnerInput;
  isPro?: Boolean;
}

export interface DayHabitUpsertWithWhereUniqueWithoutHabitInput {
  where: DayHabitWhereUniqueInput;
  update: DayHabitUpdateWithoutHabitDataInput;
  create: DayHabitCreateWithoutHabitInput;
}

export interface MoodCreateWithoutOwnerInput {
  type: MoodTypes;
  date: DateTimeInput;
}

export interface DayHabitScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  done?: Boolean;
  done_not?: Boolean;
  date?: DateTimeInput;
  date_not?: DateTimeInput;
  date_in?: DateTimeInput[] | DateTimeInput;
  date_not_in?: DateTimeInput[] | DateTimeInput;
  date_lt?: DateTimeInput;
  date_lte?: DateTimeInput;
  date_gt?: DateTimeInput;
  date_gte?: DateTimeInput;
  AND?: DayHabitScalarWhereInput[] | DayHabitScalarWhereInput;
  OR?: DayHabitScalarWhereInput[] | DayHabitScalarWhereInput;
  NOT?: DayHabitScalarWhereInput[] | DayHabitScalarWhereInput;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: UserWhereInput;
  AND?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
  OR?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
  NOT?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
}

export interface DayHabitUpdateManyWithWhereNestedInput {
  where: DayHabitScalarWhereInput;
  data: DayHabitUpdateManyDataInput;
}

export type HabitWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface DayHabitUpdateManyDataInput {
  done?: Boolean;
  date?: DateTimeInput;
}

export type PostWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface HabitUpdateManyMutationInput {
  title?: String;
  description?: String;
  starred?: Boolean;
}

export interface HabitScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  title?: String;
  title_not?: String;
  title_in?: String[] | String;
  title_not_in?: String[] | String;
  title_lt?: String;
  title_lte?: String;
  title_gt?: String;
  title_gte?: String;
  title_contains?: String;
  title_not_contains?: String;
  title_starts_with?: String;
  title_not_starts_with?: String;
  title_ends_with?: String;
  title_not_ends_with?: String;
  description?: String;
  description_not?: String;
  description_in?: String[] | String;
  description_not_in?: String[] | String;
  description_lt?: String;
  description_lte?: String;
  description_gt?: String;
  description_gte?: String;
  description_contains?: String;
  description_not_contains?: String;
  description_starts_with?: String;
  description_not_starts_with?: String;
  description_ends_with?: String;
  description_not_ends_with?: String;
  starred?: Boolean;
  starred_not?: Boolean;
  AND?: HabitScalarWhereInput[] | HabitScalarWhereInput;
  OR?: HabitScalarWhereInput[] | HabitScalarWhereInput;
  NOT?: HabitScalarWhereInput[] | HabitScalarWhereInput;
}

export interface MoodCreateInput {
  type: MoodTypes;
  date: DateTimeInput;
  owner: UserCreateOneWithoutMoodsInput;
}

export interface PostCreateWithoutAuthorInput {
  published?: Boolean;
  title: String;
  content: String;
}

export interface UserCreateOneWithoutMoodsInput {
  create?: UserCreateWithoutMoodsInput;
  connect?: UserWhereUniqueInput;
}

export interface DayHabitSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: DayHabitWhereInput;
  AND?: DayHabitSubscriptionWhereInput[] | DayHabitSubscriptionWhereInput;
  OR?: DayHabitSubscriptionWhereInput[] | DayHabitSubscriptionWhereInput;
  NOT?: DayHabitSubscriptionWhereInput[] | DayHabitSubscriptionWhereInput;
}

export interface MoodUpdateInput {
  type?: MoodTypes;
  date?: DateTimeInput;
  owner?: UserUpdateOneRequiredWithoutMoodsInput;
}

export interface HabitCreateWithoutOwnerInput {
  title: String;
  description?: String;
  starred?: Boolean;
  habits?: DayHabitCreateManyWithoutHabitInput;
}

export interface HabitCreateManyWithoutOwnerInput {
  create?: HabitCreateWithoutOwnerInput[] | HabitCreateWithoutOwnerInput;
  connect?: HabitWhereUniqueInput[] | HabitWhereUniqueInput;
}

export interface UserCreateWithoutMoodsInput {
  email: String;
  password: String;
  name: String;
  posts?: PostCreateManyWithoutAuthorInput;
  pushToken?: String;
  habits?: HabitCreateManyWithoutOwnerInput;
  isPro?: Boolean;
}

export type MoodWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface HabitUpdateOneRequiredWithoutHabitsInput {
  create?: HabitCreateWithoutHabitsInput;
  update?: HabitUpdateWithoutHabitsDataInput;
  upsert?: HabitUpsertWithoutHabitsInput;
  connect?: HabitWhereUniqueInput;
}

export interface HabitCreateWithoutHabitsInput {
  title: String;
  description?: String;
  starred?: Boolean;
  owner: UserCreateOneWithoutHabitsInput;
}

export type UserWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
  email?: String;
}>;

export interface NodeNode {
  id: ID_Output;
}

export interface UserPreviousValues {
  id: ID_Output;
  email: String;
  password: String;
  name: String;
  pushToken?: String;
  isPro: Boolean;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  name: () => Promise<String>;
  pushToken: () => Promise<String>;
  isPro: () => Promise<Boolean>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  email: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
  pushToken: () => Promise<AsyncIterator<String>>;
  isPro: () => Promise<AsyncIterator<Boolean>>;
}

export interface HabitEdge {
  node: Habit;
  cursor: String;
}

export interface HabitEdgePromise extends Promise<HabitEdge>, Fragmentable {
  node: <T = HabitPromise>() => T;
  cursor: () => Promise<String>;
}

export interface HabitEdgeSubscription
  extends Promise<AsyncIterator<HabitEdge>>,
    Fragmentable {
  node: <T = HabitSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface Habit {
  id: ID_Output;
  title: String;
  description?: String;
  starred: Boolean;
}

export interface HabitPromise extends Promise<Habit>, Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  description: () => Promise<String>;
  starred: () => Promise<Boolean>;
  owner: <T = UserPromise>() => T;
  habits: <T = FragmentableArray<DayHabit>>(
    args?: {
      where?: DayHabitWhereInput;
      orderBy?: DayHabitOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface HabitSubscription
  extends Promise<AsyncIterator<Habit>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  starred: () => Promise<AsyncIterator<Boolean>>;
  owner: <T = UserSubscription>() => T;
  habits: <T = Promise<AsyncIterator<DayHabitSubscription>>>(
    args?: {
      where?: DayHabitWhereInput;
      orderBy?: DayHabitOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface HabitConnection {
  pageInfo: PageInfo;
  edges: HabitEdge[];
}

export interface HabitConnectionPromise
  extends Promise<HabitConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<HabitEdge>>() => T;
  aggregate: <T = AggregateHabitPromise>() => T;
}

export interface HabitConnectionSubscription
  extends Promise<AsyncIterator<HabitConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<HabitEdgeSubscription>>>() => T;
  aggregate: <T = AggregateHabitSubscription>() => T;
}

export interface AggregateDayHabit {
  count: Int;
}

export interface AggregateDayHabitPromise
  extends Promise<AggregateDayHabit>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateDayHabitSubscription
  extends Promise<AsyncIterator<AggregateDayHabit>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface User {
  id: ID_Output;
  email: String;
  password: String;
  name: String;
  pushToken?: String;
  isPro: Boolean;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  name: () => Promise<String>;
  posts: <T = FragmentableArray<Post>>(
    args?: {
      where?: PostWhereInput;
      orderBy?: PostOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  pushToken: () => Promise<String>;
  habits: <T = FragmentableArray<Habit>>(
    args?: {
      where?: HabitWhereInput;
      orderBy?: HabitOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  moods: <T = FragmentableArray<Mood>>(
    args?: {
      where?: MoodWhereInput;
      orderBy?: MoodOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  isPro: () => Promise<Boolean>;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  email: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
  posts: <T = Promise<AsyncIterator<PostSubscription>>>(
    args?: {
      where?: PostWhereInput;
      orderBy?: PostOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  pushToken: () => Promise<AsyncIterator<String>>;
  habits: <T = Promise<AsyncIterator<HabitSubscription>>>(
    args?: {
      where?: HabitWhereInput;
      orderBy?: HabitOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  moods: <T = Promise<AsyncIterator<MoodSubscription>>>(
    args?: {
      where?: MoodWhereInput;
      orderBy?: MoodOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  isPro: () => Promise<AsyncIterator<Boolean>>;
}

export interface DayHabitEdge {
  node: DayHabit;
  cursor: String;
}

export interface DayHabitEdgePromise
  extends Promise<DayHabitEdge>,
    Fragmentable {
  node: <T = DayHabitPromise>() => T;
  cursor: () => Promise<String>;
}

export interface DayHabitEdgeSubscription
  extends Promise<AsyncIterator<DayHabitEdge>>,
    Fragmentable {
  node: <T = DayHabitSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface UserConnection {
  pageInfo: PageInfo;
  edges: UserEdge[];
}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface DayHabitConnection {
  pageInfo: PageInfo;
  edges: DayHabitEdge[];
}

export interface DayHabitConnectionPromise
  extends Promise<DayHabitConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<DayHabitEdge>>() => T;
  aggregate: <T = AggregateDayHabitPromise>() => T;
}

export interface DayHabitConnectionSubscription
  extends Promise<AsyncIterator<DayHabitConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<DayHabitEdgeSubscription>>>() => T;
  aggregate: <T = AggregateDayHabitSubscription>() => T;
}

export interface AggregatePost {
  count: Int;
}

export interface AggregatePostPromise
  extends Promise<AggregatePost>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregatePostSubscription
  extends Promise<AsyncIterator<AggregatePost>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface DayHabit {
  id: ID_Output;
  done: Boolean;
  date: DateTimeOutput;
}

export interface DayHabitPromise extends Promise<DayHabit>, Fragmentable {
  id: () => Promise<ID_Output>;
  done: () => Promise<Boolean>;
  date: () => Promise<DateTimeOutput>;
  habit: <T = HabitPromise>() => T;
}

export interface DayHabitSubscription
  extends Promise<AsyncIterator<DayHabit>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  done: () => Promise<AsyncIterator<Boolean>>;
  date: () => Promise<AsyncIterator<DateTimeOutput>>;
  habit: <T = HabitSubscription>() => T;
}

export interface PostConnection {
  pageInfo: PageInfo;
  edges: PostEdge[];
}

export interface PostConnectionPromise
  extends Promise<PostConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<PostEdge>>() => T;
  aggregate: <T = AggregatePostPromise>() => T;
}

export interface PostConnectionSubscription
  extends Promise<AsyncIterator<PostConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<PostEdgeSubscription>>>() => T;
  aggregate: <T = AggregatePostSubscription>() => T;
}

export interface DayHabitSubscriptionPayload {
  mutation: MutationType;
  node: DayHabit;
  updatedFields: String[];
  previousValues: DayHabitPreviousValues;
}

export interface DayHabitSubscriptionPayloadPromise
  extends Promise<DayHabitSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = DayHabitPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = DayHabitPreviousValuesPromise>() => T;
}

export interface DayHabitSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<DayHabitSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = DayHabitSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = DayHabitPreviousValuesSubscription>() => T;
}

export interface MoodEdge {
  node: Mood;
  cursor: String;
}

export interface MoodEdgePromise extends Promise<MoodEdge>, Fragmentable {
  node: <T = MoodPromise>() => T;
  cursor: () => Promise<String>;
}

export interface MoodEdgeSubscription
  extends Promise<AsyncIterator<MoodEdge>>,
    Fragmentable {
  node: <T = MoodSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface DayHabitPreviousValues {
  id: ID_Output;
  done: Boolean;
  date: DateTimeOutput;
}

export interface DayHabitPreviousValuesPromise
  extends Promise<DayHabitPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  done: () => Promise<Boolean>;
  date: () => Promise<DateTimeOutput>;
}

export interface DayHabitPreviousValuesSubscription
  extends Promise<AsyncIterator<DayHabitPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  done: () => Promise<AsyncIterator<Boolean>>;
  date: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface AggregateHabit {
  count: Int;
}

export interface AggregateHabitPromise
  extends Promise<AggregateHabit>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateHabitSubscription
  extends Promise<AsyncIterator<AggregateHabit>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface PostSubscriptionPayload {
  mutation: MutationType;
  node: Post;
  updatedFields: String[];
  previousValues: PostPreviousValues;
}

export interface PostSubscriptionPayloadPromise
  extends Promise<PostSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = PostPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = PostPreviousValuesPromise>() => T;
}

export interface PostSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<PostSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = PostSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = PostPreviousValuesSubscription>() => T;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  node: User;
  updatedFields: String[];
  previousValues: UserPreviousValues;
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface HabitSubscriptionPayload {
  mutation: MutationType;
  node: Habit;
  updatedFields: String[];
  previousValues: HabitPreviousValues;
}

export interface HabitSubscriptionPayloadPromise
  extends Promise<HabitSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = HabitPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = HabitPreviousValuesPromise>() => T;
}

export interface HabitSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<HabitSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = HabitSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = HabitPreviousValuesSubscription>() => T;
}

export interface PostPreviousValues {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  published: Boolean;
  title: String;
  content: String;
}

export interface PostPreviousValuesPromise
  extends Promise<PostPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  published: () => Promise<Boolean>;
  title: () => Promise<String>;
  content: () => Promise<String>;
}

export interface PostPreviousValuesSubscription
  extends Promise<AsyncIterator<PostPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  published: () => Promise<AsyncIterator<Boolean>>;
  title: () => Promise<AsyncIterator<String>>;
  content: () => Promise<AsyncIterator<String>>;
}

export interface AggregateMood {
  count: Int;
}

export interface AggregateMoodPromise
  extends Promise<AggregateMood>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateMoodSubscription
  extends Promise<AsyncIterator<AggregateMood>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface MoodPreviousValues {
  id: ID_Output;
  type: MoodTypes;
  date: DateTimeOutput;
}

export interface MoodPreviousValuesPromise
  extends Promise<MoodPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  type: () => Promise<MoodTypes>;
  date: () => Promise<DateTimeOutput>;
}

export interface MoodPreviousValuesSubscription
  extends Promise<AsyncIterator<MoodPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  type: () => Promise<AsyncIterator<MoodTypes>>;
  date: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface MoodSubscriptionPayload {
  mutation: MutationType;
  node: Mood;
  updatedFields: String[];
  previousValues: MoodPreviousValues;
}

export interface MoodSubscriptionPayloadPromise
  extends Promise<MoodSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = MoodPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = MoodPreviousValuesPromise>() => T;
}

export interface MoodSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<MoodSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = MoodSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = MoodPreviousValuesSubscription>() => T;
}

export interface Mood {
  id: ID_Output;
  type: MoodTypes;
  date: DateTimeOutput;
}

export interface MoodPromise extends Promise<Mood>, Fragmentable {
  id: () => Promise<ID_Output>;
  type: () => Promise<MoodTypes>;
  date: () => Promise<DateTimeOutput>;
  owner: <T = UserPromise>() => T;
}

export interface MoodSubscription
  extends Promise<AsyncIterator<Mood>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  type: () => Promise<AsyncIterator<MoodTypes>>;
  date: () => Promise<AsyncIterator<DateTimeOutput>>;
  owner: <T = UserSubscription>() => T;
}

export interface HabitPreviousValues {
  id: ID_Output;
  title: String;
  description?: String;
  starred: Boolean;
}

export interface HabitPreviousValuesPromise
  extends Promise<HabitPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  description: () => Promise<String>;
  starred: () => Promise<Boolean>;
}

export interface HabitPreviousValuesSubscription
  extends Promise<AsyncIterator<HabitPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  starred: () => Promise<AsyncIterator<Boolean>>;
}

export interface MoodConnection {
  pageInfo: PageInfo;
  edges: MoodEdge[];
}

export interface MoodConnectionPromise
  extends Promise<MoodConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<MoodEdge>>() => T;
  aggregate: <T = AggregateMoodPromise>() => T;
}

export interface MoodConnectionSubscription
  extends Promise<AsyncIterator<MoodConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<MoodEdgeSubscription>>>() => T;
  aggregate: <T = AggregateMoodSubscription>() => T;
}

export interface PostEdge {
  node: Post;
  cursor: String;
}

export interface PostEdgePromise extends Promise<PostEdge>, Fragmentable {
  node: <T = PostPromise>() => T;
  cursor: () => Promise<String>;
}

export interface PostEdgeSubscription
  extends Promise<AsyncIterator<PostEdge>>,
    Fragmentable {
  node: <T = PostSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface UserEdge {
  node: User;
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface Post {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  published: Boolean;
  title: String;
  content: String;
}

export interface PostPromise extends Promise<Post>, Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  published: () => Promise<Boolean>;
  title: () => Promise<String>;
  content: () => Promise<String>;
  author: <T = UserPromise>() => T;
}

export interface PostSubscription
  extends Promise<AsyncIterator<Post>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  published: () => Promise<AsyncIterator<Boolean>>;
  title: () => Promise<AsyncIterator<String>>;
  content: () => Promise<AsyncIterator<String>>;
  author: <T = UserSubscription>() => T;
}

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. 
*/
export type Int = number;

export type Long = string;

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "Post",
    embedded: false
  },
  {
    name: "User",
    embedded: false
  },
  {
    name: "Habit",
    embedded: false
  },
  {
    name: "DayHabit",
    embedded: false
  },
  {
    name: "Mood",
    embedded: false
  },
  {
    name: "MoodTypes",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const Prisma = makePrismaClientClass<ClientConstructor<Prisma>>({
  typeDefs,
  models,
  endpoint: `http://${process.env["PRISMA_ENDPOINT"]}:${
    process.env["PRISMA_PORT"]
  }/${process.env["PRISMA_NAME"]}/${process.env["PRISMA_STAGE"]}`,
  secret: `${process.env["PRISMA_SECRET"]}`
});
export const prisma = new Prisma();

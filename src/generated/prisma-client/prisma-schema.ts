// Code generated by Prisma (prisma@1.30.4). DO NOT EDIT.
  // Please don't change this file manually but run `prisma generate` to update it.
  // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

export const typeDefs = /* GraphQL */ `type AggregateDayHabit {
  count: Int!
}

type AggregateHabit {
  count: Int!
}

type AggregateMood {
  count: Int!
}

type AggregatePost {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type BatchPayload {
  count: Long!
}

scalar DateTime

type DayHabit {
  id: ID!
  done: Boolean!
  date: DateTime!
  habit: Habit!
}

type DayHabitConnection {
  pageInfo: PageInfo!
  edges: [DayHabitEdge]!
  aggregate: AggregateDayHabit!
}

input DayHabitCreateInput {
  done: Boolean
  date: DateTime!
  habit: HabitCreateOneWithoutHabitsInput!
}

input DayHabitCreateManyWithoutHabitInput {
  create: [DayHabitCreateWithoutHabitInput!]
  connect: [DayHabitWhereUniqueInput!]
}

input DayHabitCreateWithoutHabitInput {
  done: Boolean
  date: DateTime!
}

type DayHabitEdge {
  node: DayHabit!
  cursor: String!
}

enum DayHabitOrderByInput {
  id_ASC
  id_DESC
  done_ASC
  done_DESC
  date_ASC
  date_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type DayHabitPreviousValues {
  id: ID!
  done: Boolean!
  date: DateTime!
}

input DayHabitScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  done: Boolean
  done_not: Boolean
  date: DateTime
  date_not: DateTime
  date_in: [DateTime!]
  date_not_in: [DateTime!]
  date_lt: DateTime
  date_lte: DateTime
  date_gt: DateTime
  date_gte: DateTime
  AND: [DayHabitScalarWhereInput!]
  OR: [DayHabitScalarWhereInput!]
  NOT: [DayHabitScalarWhereInput!]
}

type DayHabitSubscriptionPayload {
  mutation: MutationType!
  node: DayHabit
  updatedFields: [String!]
  previousValues: DayHabitPreviousValues
}

input DayHabitSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: DayHabitWhereInput
  AND: [DayHabitSubscriptionWhereInput!]
  OR: [DayHabitSubscriptionWhereInput!]
  NOT: [DayHabitSubscriptionWhereInput!]
}

input DayHabitUpdateInput {
  done: Boolean
  date: DateTime
  habit: HabitUpdateOneRequiredWithoutHabitsInput
}

input DayHabitUpdateManyDataInput {
  done: Boolean
  date: DateTime
}

input DayHabitUpdateManyMutationInput {
  done: Boolean
  date: DateTime
}

input DayHabitUpdateManyWithoutHabitInput {
  create: [DayHabitCreateWithoutHabitInput!]
  delete: [DayHabitWhereUniqueInput!]
  connect: [DayHabitWhereUniqueInput!]
  set: [DayHabitWhereUniqueInput!]
  disconnect: [DayHabitWhereUniqueInput!]
  update: [DayHabitUpdateWithWhereUniqueWithoutHabitInput!]
  upsert: [DayHabitUpsertWithWhereUniqueWithoutHabitInput!]
  deleteMany: [DayHabitScalarWhereInput!]
  updateMany: [DayHabitUpdateManyWithWhereNestedInput!]
}

input DayHabitUpdateManyWithWhereNestedInput {
  where: DayHabitScalarWhereInput!
  data: DayHabitUpdateManyDataInput!
}

input DayHabitUpdateWithoutHabitDataInput {
  done: Boolean
  date: DateTime
}

input DayHabitUpdateWithWhereUniqueWithoutHabitInput {
  where: DayHabitWhereUniqueInput!
  data: DayHabitUpdateWithoutHabitDataInput!
}

input DayHabitUpsertWithWhereUniqueWithoutHabitInput {
  where: DayHabitWhereUniqueInput!
  update: DayHabitUpdateWithoutHabitDataInput!
  create: DayHabitCreateWithoutHabitInput!
}

input DayHabitWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  done: Boolean
  done_not: Boolean
  date: DateTime
  date_not: DateTime
  date_in: [DateTime!]
  date_not_in: [DateTime!]
  date_lt: DateTime
  date_lte: DateTime
  date_gt: DateTime
  date_gte: DateTime
  habit: HabitWhereInput
  AND: [DayHabitWhereInput!]
  OR: [DayHabitWhereInput!]
  NOT: [DayHabitWhereInput!]
}

input DayHabitWhereUniqueInput {
  id: ID
}

type Habit {
  id: ID!
  title: String!
  description: String
  starred: Boolean!
  owner: User!
  habits(where: DayHabitWhereInput, orderBy: DayHabitOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [DayHabit!]
}

type HabitConnection {
  pageInfo: PageInfo!
  edges: [HabitEdge]!
  aggregate: AggregateHabit!
}

input HabitCreateInput {
  title: String!
  description: String
  starred: Boolean
  owner: UserCreateOneWithoutHabitsInput!
  habits: DayHabitCreateManyWithoutHabitInput
}

input HabitCreateManyWithoutOwnerInput {
  create: [HabitCreateWithoutOwnerInput!]
  connect: [HabitWhereUniqueInput!]
}

input HabitCreateOneWithoutHabitsInput {
  create: HabitCreateWithoutHabitsInput
  connect: HabitWhereUniqueInput
}

input HabitCreateWithoutHabitsInput {
  title: String!
  description: String
  starred: Boolean
  owner: UserCreateOneWithoutHabitsInput!
}

input HabitCreateWithoutOwnerInput {
  title: String!
  description: String
  starred: Boolean
  habits: DayHabitCreateManyWithoutHabitInput
}

type HabitEdge {
  node: Habit!
  cursor: String!
}

enum HabitOrderByInput {
  id_ASC
  id_DESC
  title_ASC
  title_DESC
  description_ASC
  description_DESC
  starred_ASC
  starred_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type HabitPreviousValues {
  id: ID!
  title: String!
  description: String
  starred: Boolean!
}

input HabitScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  starred: Boolean
  starred_not: Boolean
  AND: [HabitScalarWhereInput!]
  OR: [HabitScalarWhereInput!]
  NOT: [HabitScalarWhereInput!]
}

type HabitSubscriptionPayload {
  mutation: MutationType!
  node: Habit
  updatedFields: [String!]
  previousValues: HabitPreviousValues
}

input HabitSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: HabitWhereInput
  AND: [HabitSubscriptionWhereInput!]
  OR: [HabitSubscriptionWhereInput!]
  NOT: [HabitSubscriptionWhereInput!]
}

input HabitUpdateInput {
  title: String
  description: String
  starred: Boolean
  owner: UserUpdateOneRequiredWithoutHabitsInput
  habits: DayHabitUpdateManyWithoutHabitInput
}

input HabitUpdateManyDataInput {
  title: String
  description: String
  starred: Boolean
}

input HabitUpdateManyMutationInput {
  title: String
  description: String
  starred: Boolean
}

input HabitUpdateManyWithoutOwnerInput {
  create: [HabitCreateWithoutOwnerInput!]
  delete: [HabitWhereUniqueInput!]
  connect: [HabitWhereUniqueInput!]
  set: [HabitWhereUniqueInput!]
  disconnect: [HabitWhereUniqueInput!]
  update: [HabitUpdateWithWhereUniqueWithoutOwnerInput!]
  upsert: [HabitUpsertWithWhereUniqueWithoutOwnerInput!]
  deleteMany: [HabitScalarWhereInput!]
  updateMany: [HabitUpdateManyWithWhereNestedInput!]
}

input HabitUpdateManyWithWhereNestedInput {
  where: HabitScalarWhereInput!
  data: HabitUpdateManyDataInput!
}

input HabitUpdateOneRequiredWithoutHabitsInput {
  create: HabitCreateWithoutHabitsInput
  update: HabitUpdateWithoutHabitsDataInput
  upsert: HabitUpsertWithoutHabitsInput
  connect: HabitWhereUniqueInput
}

input HabitUpdateWithoutHabitsDataInput {
  title: String
  description: String
  starred: Boolean
  owner: UserUpdateOneRequiredWithoutHabitsInput
}

input HabitUpdateWithoutOwnerDataInput {
  title: String
  description: String
  starred: Boolean
  habits: DayHabitUpdateManyWithoutHabitInput
}

input HabitUpdateWithWhereUniqueWithoutOwnerInput {
  where: HabitWhereUniqueInput!
  data: HabitUpdateWithoutOwnerDataInput!
}

input HabitUpsertWithoutHabitsInput {
  update: HabitUpdateWithoutHabitsDataInput!
  create: HabitCreateWithoutHabitsInput!
}

input HabitUpsertWithWhereUniqueWithoutOwnerInput {
  where: HabitWhereUniqueInput!
  update: HabitUpdateWithoutOwnerDataInput!
  create: HabitCreateWithoutOwnerInput!
}

input HabitWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  starred: Boolean
  starred_not: Boolean
  owner: UserWhereInput
  habits_every: DayHabitWhereInput
  habits_some: DayHabitWhereInput
  habits_none: DayHabitWhereInput
  AND: [HabitWhereInput!]
  OR: [HabitWhereInput!]
  NOT: [HabitWhereInput!]
}

input HabitWhereUniqueInput {
  id: ID
}

scalar Long

type Mood {
  id: ID!
  type: MoodTypes!
  date: DateTime!
  owner: User!
}

type MoodConnection {
  pageInfo: PageInfo!
  edges: [MoodEdge]!
  aggregate: AggregateMood!
}

input MoodCreateInput {
  type: MoodTypes!
  date: DateTime!
  owner: UserCreateOneWithoutMoodsInput!
}

input MoodCreateManyWithoutOwnerInput {
  create: [MoodCreateWithoutOwnerInput!]
  connect: [MoodWhereUniqueInput!]
}

input MoodCreateWithoutOwnerInput {
  type: MoodTypes!
  date: DateTime!
}

type MoodEdge {
  node: Mood!
  cursor: String!
}

enum MoodOrderByInput {
  id_ASC
  id_DESC
  type_ASC
  type_DESC
  date_ASC
  date_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type MoodPreviousValues {
  id: ID!
  type: MoodTypes!
  date: DateTime!
}

input MoodScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  type: MoodTypes
  type_not: MoodTypes
  type_in: [MoodTypes!]
  type_not_in: [MoodTypes!]
  date: DateTime
  date_not: DateTime
  date_in: [DateTime!]
  date_not_in: [DateTime!]
  date_lt: DateTime
  date_lte: DateTime
  date_gt: DateTime
  date_gte: DateTime
  AND: [MoodScalarWhereInput!]
  OR: [MoodScalarWhereInput!]
  NOT: [MoodScalarWhereInput!]
}

type MoodSubscriptionPayload {
  mutation: MutationType!
  node: Mood
  updatedFields: [String!]
  previousValues: MoodPreviousValues
}

input MoodSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: MoodWhereInput
  AND: [MoodSubscriptionWhereInput!]
  OR: [MoodSubscriptionWhereInput!]
  NOT: [MoodSubscriptionWhereInput!]
}

enum MoodTypes {
  Dizzy
  Frown
  FrownOpen
  Meh
  Smile
  Laugh
  GrinHearts
}

input MoodUpdateInput {
  type: MoodTypes
  date: DateTime
  owner: UserUpdateOneRequiredWithoutMoodsInput
}

input MoodUpdateManyDataInput {
  type: MoodTypes
  date: DateTime
}

input MoodUpdateManyMutationInput {
  type: MoodTypes
  date: DateTime
}

input MoodUpdateManyWithoutOwnerInput {
  create: [MoodCreateWithoutOwnerInput!]
  delete: [MoodWhereUniqueInput!]
  connect: [MoodWhereUniqueInput!]
  set: [MoodWhereUniqueInput!]
  disconnect: [MoodWhereUniqueInput!]
  update: [MoodUpdateWithWhereUniqueWithoutOwnerInput!]
  upsert: [MoodUpsertWithWhereUniqueWithoutOwnerInput!]
  deleteMany: [MoodScalarWhereInput!]
  updateMany: [MoodUpdateManyWithWhereNestedInput!]
}

input MoodUpdateManyWithWhereNestedInput {
  where: MoodScalarWhereInput!
  data: MoodUpdateManyDataInput!
}

input MoodUpdateWithoutOwnerDataInput {
  type: MoodTypes
  date: DateTime
}

input MoodUpdateWithWhereUniqueWithoutOwnerInput {
  where: MoodWhereUniqueInput!
  data: MoodUpdateWithoutOwnerDataInput!
}

input MoodUpsertWithWhereUniqueWithoutOwnerInput {
  where: MoodWhereUniqueInput!
  update: MoodUpdateWithoutOwnerDataInput!
  create: MoodCreateWithoutOwnerInput!
}

input MoodWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  type: MoodTypes
  type_not: MoodTypes
  type_in: [MoodTypes!]
  type_not_in: [MoodTypes!]
  date: DateTime
  date_not: DateTime
  date_in: [DateTime!]
  date_not_in: [DateTime!]
  date_lt: DateTime
  date_lte: DateTime
  date_gt: DateTime
  date_gte: DateTime
  owner: UserWhereInput
  AND: [MoodWhereInput!]
  OR: [MoodWhereInput!]
  NOT: [MoodWhereInput!]
}

input MoodWhereUniqueInput {
  id: ID
}

type Mutation {
  createDayHabit(data: DayHabitCreateInput!): DayHabit!
  updateDayHabit(data: DayHabitUpdateInput!, where: DayHabitWhereUniqueInput!): DayHabit
  updateManyDayHabits(data: DayHabitUpdateManyMutationInput!, where: DayHabitWhereInput): BatchPayload!
  upsertDayHabit(where: DayHabitWhereUniqueInput!, create: DayHabitCreateInput!, update: DayHabitUpdateInput!): DayHabit!
  deleteDayHabit(where: DayHabitWhereUniqueInput!): DayHabit
  deleteManyDayHabits(where: DayHabitWhereInput): BatchPayload!
  createHabit(data: HabitCreateInput!): Habit!
  updateHabit(data: HabitUpdateInput!, where: HabitWhereUniqueInput!): Habit
  updateManyHabits(data: HabitUpdateManyMutationInput!, where: HabitWhereInput): BatchPayload!
  upsertHabit(where: HabitWhereUniqueInput!, create: HabitCreateInput!, update: HabitUpdateInput!): Habit!
  deleteHabit(where: HabitWhereUniqueInput!): Habit
  deleteManyHabits(where: HabitWhereInput): BatchPayload!
  createMood(data: MoodCreateInput!): Mood!
  updateMood(data: MoodUpdateInput!, where: MoodWhereUniqueInput!): Mood
  updateManyMoods(data: MoodUpdateManyMutationInput!, where: MoodWhereInput): BatchPayload!
  upsertMood(where: MoodWhereUniqueInput!, create: MoodCreateInput!, update: MoodUpdateInput!): Mood!
  deleteMood(where: MoodWhereUniqueInput!): Mood
  deleteManyMoods(where: MoodWhereInput): BatchPayload!
  createPost(data: PostCreateInput!): Post!
  updatePost(data: PostUpdateInput!, where: PostWhereUniqueInput!): Post
  updateManyPosts(data: PostUpdateManyMutationInput!, where: PostWhereInput): BatchPayload!
  upsertPost(where: PostWhereUniqueInput!, create: PostCreateInput!, update: PostUpdateInput!): Post!
  deletePost(where: PostWhereUniqueInput!): Post
  deleteManyPosts(where: PostWhereInput): BatchPayload!
  createUser(data: UserCreateInput!): User!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  deleteUser(where: UserWhereUniqueInput!): User
  deleteManyUsers(where: UserWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Post {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  published: Boolean!
  title: String!
  content: String!
  author: User!
}

type PostConnection {
  pageInfo: PageInfo!
  edges: [PostEdge]!
  aggregate: AggregatePost!
}

input PostCreateInput {
  published: Boolean
  title: String!
  content: String!
  author: UserCreateOneWithoutPostsInput!
}

input PostCreateManyWithoutAuthorInput {
  create: [PostCreateWithoutAuthorInput!]
  connect: [PostWhereUniqueInput!]
}

input PostCreateWithoutAuthorInput {
  published: Boolean
  title: String!
  content: String!
}

type PostEdge {
  node: Post!
  cursor: String!
}

enum PostOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  published_ASC
  published_DESC
  title_ASC
  title_DESC
  content_ASC
  content_DESC
}

type PostPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  published: Boolean!
  title: String!
  content: String!
}

input PostScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  published: Boolean
  published_not: Boolean
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  content: String
  content_not: String
  content_in: [String!]
  content_not_in: [String!]
  content_lt: String
  content_lte: String
  content_gt: String
  content_gte: String
  content_contains: String
  content_not_contains: String
  content_starts_with: String
  content_not_starts_with: String
  content_ends_with: String
  content_not_ends_with: String
  AND: [PostScalarWhereInput!]
  OR: [PostScalarWhereInput!]
  NOT: [PostScalarWhereInput!]
}

type PostSubscriptionPayload {
  mutation: MutationType!
  node: Post
  updatedFields: [String!]
  previousValues: PostPreviousValues
}

input PostSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: PostWhereInput
  AND: [PostSubscriptionWhereInput!]
  OR: [PostSubscriptionWhereInput!]
  NOT: [PostSubscriptionWhereInput!]
}

input PostUpdateInput {
  published: Boolean
  title: String
  content: String
  author: UserUpdateOneRequiredWithoutPostsInput
}

input PostUpdateManyDataInput {
  published: Boolean
  title: String
  content: String
}

input PostUpdateManyMutationInput {
  published: Boolean
  title: String
  content: String
}

input PostUpdateManyWithoutAuthorInput {
  create: [PostCreateWithoutAuthorInput!]
  delete: [PostWhereUniqueInput!]
  connect: [PostWhereUniqueInput!]
  set: [PostWhereUniqueInput!]
  disconnect: [PostWhereUniqueInput!]
  update: [PostUpdateWithWhereUniqueWithoutAuthorInput!]
  upsert: [PostUpsertWithWhereUniqueWithoutAuthorInput!]
  deleteMany: [PostScalarWhereInput!]
  updateMany: [PostUpdateManyWithWhereNestedInput!]
}

input PostUpdateManyWithWhereNestedInput {
  where: PostScalarWhereInput!
  data: PostUpdateManyDataInput!
}

input PostUpdateWithoutAuthorDataInput {
  published: Boolean
  title: String
  content: String
}

input PostUpdateWithWhereUniqueWithoutAuthorInput {
  where: PostWhereUniqueInput!
  data: PostUpdateWithoutAuthorDataInput!
}

input PostUpsertWithWhereUniqueWithoutAuthorInput {
  where: PostWhereUniqueInput!
  update: PostUpdateWithoutAuthorDataInput!
  create: PostCreateWithoutAuthorInput!
}

input PostWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  published: Boolean
  published_not: Boolean
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  content: String
  content_not: String
  content_in: [String!]
  content_not_in: [String!]
  content_lt: String
  content_lte: String
  content_gt: String
  content_gte: String
  content_contains: String
  content_not_contains: String
  content_starts_with: String
  content_not_starts_with: String
  content_ends_with: String
  content_not_ends_with: String
  author: UserWhereInput
  AND: [PostWhereInput!]
  OR: [PostWhereInput!]
  NOT: [PostWhereInput!]
}

input PostWhereUniqueInput {
  id: ID
}

type Query {
  dayHabit(where: DayHabitWhereUniqueInput!): DayHabit
  dayHabits(where: DayHabitWhereInput, orderBy: DayHabitOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [DayHabit]!
  dayHabitsConnection(where: DayHabitWhereInput, orderBy: DayHabitOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): DayHabitConnection!
  habit(where: HabitWhereUniqueInput!): Habit
  habits(where: HabitWhereInput, orderBy: HabitOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Habit]!
  habitsConnection(where: HabitWhereInput, orderBy: HabitOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): HabitConnection!
  mood(where: MoodWhereUniqueInput!): Mood
  moods(where: MoodWhereInput, orderBy: MoodOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Mood]!
  moodsConnection(where: MoodWhereInput, orderBy: MoodOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): MoodConnection!
  post(where: PostWhereUniqueInput!): Post
  posts(where: PostWhereInput, orderBy: PostOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Post]!
  postsConnection(where: PostWhereInput, orderBy: PostOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PostConnection!
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  node(id: ID!): Node
}

type Subscription {
  dayHabit(where: DayHabitSubscriptionWhereInput): DayHabitSubscriptionPayload
  habit(where: HabitSubscriptionWhereInput): HabitSubscriptionPayload
  mood(where: MoodSubscriptionWhereInput): MoodSubscriptionPayload
  post(where: PostSubscriptionWhereInput): PostSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
}

type User {
  id: ID!
  email: String!
  password: String!
  name: String!
  posts(where: PostWhereInput, orderBy: PostOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Post!]
  pushToken: String
  habits(where: HabitWhereInput, orderBy: HabitOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Habit!]
  moods(where: MoodWhereInput, orderBy: MoodOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Mood!]
  isPro: Boolean!
}

type UserConnection {
  pageInfo: PageInfo!
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  email: String!
  password: String!
  name: String!
  posts: PostCreateManyWithoutAuthorInput
  pushToken: String
  habits: HabitCreateManyWithoutOwnerInput
  moods: MoodCreateManyWithoutOwnerInput
  isPro: Boolean
}

input UserCreateOneWithoutHabitsInput {
  create: UserCreateWithoutHabitsInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutMoodsInput {
  create: UserCreateWithoutMoodsInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutPostsInput {
  create: UserCreateWithoutPostsInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutHabitsInput {
  email: String!
  password: String!
  name: String!
  posts: PostCreateManyWithoutAuthorInput
  pushToken: String
  moods: MoodCreateManyWithoutOwnerInput
  isPro: Boolean
}

input UserCreateWithoutMoodsInput {
  email: String!
  password: String!
  name: String!
  posts: PostCreateManyWithoutAuthorInput
  pushToken: String
  habits: HabitCreateManyWithoutOwnerInput
  isPro: Boolean
}

input UserCreateWithoutPostsInput {
  email: String!
  password: String!
  name: String!
  pushToken: String
  habits: HabitCreateManyWithoutOwnerInput
  moods: MoodCreateManyWithoutOwnerInput
  isPro: Boolean
}

type UserEdge {
  node: User!
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  email_ASC
  email_DESC
  password_ASC
  password_DESC
  name_ASC
  name_DESC
  pushToken_ASC
  pushToken_DESC
  isPro_ASC
  isPro_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type UserPreviousValues {
  id: ID!
  email: String!
  password: String!
  name: String!
  pushToken: String
  isPro: Boolean!
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserWhereInput
  AND: [UserSubscriptionWhereInput!]
  OR: [UserSubscriptionWhereInput!]
  NOT: [UserSubscriptionWhereInput!]
}

input UserUpdateInput {
  email: String
  password: String
  name: String
  posts: PostUpdateManyWithoutAuthorInput
  pushToken: String
  habits: HabitUpdateManyWithoutOwnerInput
  moods: MoodUpdateManyWithoutOwnerInput
  isPro: Boolean
}

input UserUpdateManyMutationInput {
  email: String
  password: String
  name: String
  pushToken: String
  isPro: Boolean
}

input UserUpdateOneRequiredWithoutHabitsInput {
  create: UserCreateWithoutHabitsInput
  update: UserUpdateWithoutHabitsDataInput
  upsert: UserUpsertWithoutHabitsInput
  connect: UserWhereUniqueInput
}

input UserUpdateOneRequiredWithoutMoodsInput {
  create: UserCreateWithoutMoodsInput
  update: UserUpdateWithoutMoodsDataInput
  upsert: UserUpsertWithoutMoodsInput
  connect: UserWhereUniqueInput
}

input UserUpdateOneRequiredWithoutPostsInput {
  create: UserCreateWithoutPostsInput
  update: UserUpdateWithoutPostsDataInput
  upsert: UserUpsertWithoutPostsInput
  connect: UserWhereUniqueInput
}

input UserUpdateWithoutHabitsDataInput {
  email: String
  password: String
  name: String
  posts: PostUpdateManyWithoutAuthorInput
  pushToken: String
  moods: MoodUpdateManyWithoutOwnerInput
  isPro: Boolean
}

input UserUpdateWithoutMoodsDataInput {
  email: String
  password: String
  name: String
  posts: PostUpdateManyWithoutAuthorInput
  pushToken: String
  habits: HabitUpdateManyWithoutOwnerInput
  isPro: Boolean
}

input UserUpdateWithoutPostsDataInput {
  email: String
  password: String
  name: String
  pushToken: String
  habits: HabitUpdateManyWithoutOwnerInput
  moods: MoodUpdateManyWithoutOwnerInput
  isPro: Boolean
}

input UserUpsertWithoutHabitsInput {
  update: UserUpdateWithoutHabitsDataInput!
  create: UserCreateWithoutHabitsInput!
}

input UserUpsertWithoutMoodsInput {
  update: UserUpdateWithoutMoodsDataInput!
  create: UserCreateWithoutMoodsInput!
}

input UserUpsertWithoutPostsInput {
  update: UserUpdateWithoutPostsDataInput!
  create: UserCreateWithoutPostsInput!
}

input UserWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  password: String
  password_not: String
  password_in: [String!]
  password_not_in: [String!]
  password_lt: String
  password_lte: String
  password_gt: String
  password_gte: String
  password_contains: String
  password_not_contains: String
  password_starts_with: String
  password_not_starts_with: String
  password_ends_with: String
  password_not_ends_with: String
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  posts_every: PostWhereInput
  posts_some: PostWhereInput
  posts_none: PostWhereInput
  pushToken: String
  pushToken_not: String
  pushToken_in: [String!]
  pushToken_not_in: [String!]
  pushToken_lt: String
  pushToken_lte: String
  pushToken_gt: String
  pushToken_gte: String
  pushToken_contains: String
  pushToken_not_contains: String
  pushToken_starts_with: String
  pushToken_not_starts_with: String
  pushToken_ends_with: String
  pushToken_not_ends_with: String
  habits_every: HabitWhereInput
  habits_some: HabitWhereInput
  habits_none: HabitWhereInput
  moods_every: MoodWhereInput
  moods_some: MoodWhereInput
  moods_none: MoodWhereInput
  isPro: Boolean
  isPro_not: Boolean
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
}

input UserWhereUniqueInput {
  id: ID
  email: String
}
`
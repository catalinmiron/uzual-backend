### This file was autogenerated by Nexus 0.11.6
### Do not make changes to this file directly


type AuthPayload {
  token: String
  user: User
}

scalar DateTime

type DayHabit {
  date: DateTime!
  done: Boolean!
  habit: Habit!
  id: ID!
}

enum DayHabitOrderByInput {
  createdAt_ASC
  createdAt_DESC
  date_ASC
  date_DESC
  done_ASC
  done_DESC
  id_ASC
  id_DESC
  updatedAt_ASC
  updatedAt_DESC
}

input DayHabitWhereInput {
  AND: [DayHabitWhereInput!]
  date: DateTime
  date_gt: DateTime
  date_gte: DateTime
  date_in: [DateTime!]
  date_lt: DateTime
  date_lte: DateTime
  date_not: DateTime
  date_not_in: [DateTime!]
  done: Boolean
  done_not: Boolean
  habit: HabitWhereInput
  id: ID
  id_contains: ID
  id_ends_with: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_contains: ID
  id_not_ends_with: ID
  id_not_in: [ID!]
  id_not_starts_with: ID
  id_starts_with: ID
  NOT: [DayHabitWhereInput!]
  OR: [DayHabitWhereInput!]
}

type Habit {
  description: String
  habits(after: String, before: String, first: Int, last: Int, orderBy: DayHabitOrderByInput, skip: Int, where: DayHabitWhereInput): [DayHabit!]
  id: ID!
  owner: User!
  starred: Boolean!
  title: String!
}

enum HabitOrderByInput {
  createdAt_ASC
  createdAt_DESC
  description_ASC
  description_DESC
  id_ASC
  id_DESC
  starred_ASC
  starred_DESC
  title_ASC
  title_DESC
  updatedAt_ASC
  updatedAt_DESC
}

input HabitWhereInput {
  AND: [HabitWhereInput!]
  description: String
  description_contains: String
  description_ends_with: String
  description_gt: String
  description_gte: String
  description_in: [String!]
  description_lt: String
  description_lte: String
  description_not: String
  description_not_contains: String
  description_not_ends_with: String
  description_not_in: [String!]
  description_not_starts_with: String
  description_starts_with: String
  habits_every: DayHabitWhereInput
  habits_none: DayHabitWhereInput
  habits_some: DayHabitWhereInput
  id: ID
  id_contains: ID
  id_ends_with: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_contains: ID
  id_not_ends_with: ID
  id_not_in: [ID!]
  id_not_starts_with: ID
  id_starts_with: ID
  NOT: [HabitWhereInput!]
  OR: [HabitWhereInput!]
  owner: UserWhereInput
  starred: Boolean
  starred_not: Boolean
  title: String
  title_contains: String
  title_ends_with: String
  title_gt: String
  title_gte: String
  title_in: [String!]
  title_lt: String
  title_lte: String
  title_not: String
  title_not_contains: String
  title_not_ends_with: String
  title_not_in: [String!]
  title_not_starts_with: String
  title_starts_with: String
}

type Mood {
  date: DateTime!
  id: ID!
  owner: User!
  type: MoodTypes!
}

enum MoodOrderByInput {
  createdAt_ASC
  createdAt_DESC
  date_ASC
  date_DESC
  id_ASC
  id_DESC
  type_ASC
  type_DESC
  updatedAt_ASC
  updatedAt_DESC
}

enum MoodTypes {
  Dizzy
  Frown
  FrownOpen
  GrinHearts
  Laugh
  Meh
  Smile
}

input MoodWhereInput {
  AND: [MoodWhereInput!]
  date: DateTime
  date_gt: DateTime
  date_gte: DateTime
  date_in: [DateTime!]
  date_lt: DateTime
  date_lte: DateTime
  date_not: DateTime
  date_not_in: [DateTime!]
  id: ID
  id_contains: ID
  id_ends_with: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_contains: ID
  id_not_ends_with: ID
  id_not_in: [ID!]
  id_not_starts_with: ID
  id_starts_with: ID
  NOT: [MoodWhereInput!]
  OR: [MoodWhereInput!]
  owner: UserWhereInput
  type: MoodTypes
  type_in: [MoodTypes!]
  type_not: MoodTypes
  type_not_in: [MoodTypes!]
}

type Mutation {
  createHabit(description: String = "", id: ID = "", starred: Boolean = false, title: String!): Habit
  deleteHabit(id: ID): Habit
  login(email: String, password: String): AuthPayload
  setDailyHabit(date: String = "2019-07-23", habitId: ID): DayHabit
  setMood(date: String = "2019-07-23", type: MoodTypes!): Mood
  setPushToken(pushToken: String): User
  signup(email: String, name: String, password: String): AuthPayload
}

input PostWhereInput {
  AND: [PostWhereInput!]
  author: UserWhereInput
  content: String
  content_contains: String
  content_ends_with: String
  content_gt: String
  content_gte: String
  content_in: [String!]
  content_lt: String
  content_lte: String
  content_not: String
  content_not_contains: String
  content_not_ends_with: String
  content_not_in: [String!]
  content_not_starts_with: String
  content_starts_with: String
  createdAt: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  createdAt_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_not: DateTime
  createdAt_not_in: [DateTime!]
  id: ID
  id_contains: ID
  id_ends_with: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_contains: ID
  id_not_ends_with: ID
  id_not_in: [ID!]
  id_not_starts_with: ID
  id_starts_with: ID
  NOT: [PostWhereInput!]
  OR: [PostWhereInput!]
  published: Boolean
  published_not: Boolean
  title: String
  title_contains: String
  title_ends_with: String
  title_gt: String
  title_gte: String
  title_in: [String!]
  title_lt: String
  title_lte: String
  title_not: String
  title_not_contains: String
  title_not_ends_with: String
  title_not_in: [String!]
  title_not_starts_with: String
  title_starts_with: String
  updatedAt: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_not: DateTime
  updatedAt_not_in: [DateTime!]
}

type Query {
  habits(after: String, before: String, first: Int, last: Int, orderBy: HabitOrderByInput, skip: Int, where: HabitWhereInput): [Habit!]
  me: User
  moods(after: String, before: String, first: Int, last: Int, orderBy: MoodOrderByInput, skip: Int, where: MoodWhereInput): [Mood!]
}

type User {
  email: String!
  habits(first: Int, orderBy: HabitOrderByInput): [Habit!]
  id: ID!
  isPro: Boolean!
  moods(first: Int, orderBy: MoodOrderByInput): [Mood!]
  name: String!
  pushToken: String
}

input UserWhereInput {
  AND: [UserWhereInput!]
  email: String
  email_contains: String
  email_ends_with: String
  email_gt: String
  email_gte: String
  email_in: [String!]
  email_lt: String
  email_lte: String
  email_not: String
  email_not_contains: String
  email_not_ends_with: String
  email_not_in: [String!]
  email_not_starts_with: String
  email_starts_with: String
  habits_every: HabitWhereInput
  habits_none: HabitWhereInput
  habits_some: HabitWhereInput
  id: ID
  id_contains: ID
  id_ends_with: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_contains: ID
  id_not_ends_with: ID
  id_not_in: [ID!]
  id_not_starts_with: ID
  id_starts_with: ID
  isPro: Boolean
  isPro_not: Boolean
  moods_every: MoodWhereInput
  moods_none: MoodWhereInput
  moods_some: MoodWhereInput
  name: String
  name_contains: String
  name_ends_with: String
  name_gt: String
  name_gte: String
  name_in: [String!]
  name_lt: String
  name_lte: String
  name_not: String
  name_not_contains: String
  name_not_ends_with: String
  name_not_in: [String!]
  name_not_starts_with: String
  name_starts_with: String
  NOT: [UserWhereInput!]
  OR: [UserWhereInput!]
  password: String
  password_contains: String
  password_ends_with: String
  password_gt: String
  password_gte: String
  password_in: [String!]
  password_lt: String
  password_lte: String
  password_not: String
  password_not_contains: String
  password_not_ends_with: String
  password_not_in: [String!]
  password_not_starts_with: String
  password_starts_with: String
  posts_every: PostWhereInput
  posts_none: PostWhereInput
  posts_some: PostWhereInput
  pushToken: String
  pushToken_contains: String
  pushToken_ends_with: String
  pushToken_gt: String
  pushToken_gte: String
  pushToken_in: [String!]
  pushToken_lt: String
  pushToken_lte: String
  pushToken_not: String
  pushToken_not_contains: String
  pushToken_not_ends_with: String
  pushToken_not_in: [String!]
  pushToken_not_starts_with: String
  pushToken_starts_with: String
}
